
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	Module   : 02_myarray.hsp
	Version  : 0.27.3
	Date     : 2023/01/21
	Author   : YUZRANIUM（ゆずらにうむ）
	Twitter  : https://twitter.com/YUZRANIUM
	Git Hub  : https://github.com/YUZRANIUM/02_myarray
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	必要環境 | HSP 3.6 以上
	動作環境 | Windows10, 11
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

	このモジュールはHSPTV!掲示板の皆様によって支えられております。
	この場を借りて感謝申し上げます。誠に有難うございます。

	***  掲示板情報  ***
	kind    : 宣伝
	date    : 2023/01/16
	person  : Yuzranium
	content : 多次元配列をなんやかんやする

	***  掲示板情報 (過去ログ)  ***
	date    : 2022/11/26
	content : 多次元配列変数を複数行文字列に

 ※注意事項※

	* サンプルファイルの実行時、動作が重くなります。
	* 気になるようでしたら次元要素数の変更をおすすめします。

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


# 追加される命令・関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━



// 各次元要素数から多次元配列の先頭からのオフセット値を返す
//
// ary         : 多次元配列変数
// d1,d2,d3,d4 : 各次元要素数
dimlinec(ary, d1, d2, d3, d4)


// 多次元配列変数の先頭からのオフセット値を各次元要素数に変換
//
// ary       : 多次元配列変数
// i_        : 各次元要素数を受け取る配列変数
// dim_ofset : 配列のオフセット値
linedim ary, i_, dim_ofset

------------------------------------------------------------

// 動作制御命令
//
// p1 : 動作を開始する配列のオフセット値
// p2 : 動作を終了する配列のオフセット値
ctlarray p1, p2


// 複数制御開始命令
//
ctlarray_start


// 動作制御除外命令
//
ctlexcld


// 複数制御終了命令
//
ctlarray_end

------------------------------------------------------------

// 配列演算命令
//
// ans_ary    : 解答を受け取る変数名
// ary1, ary2 : 変数名
// calc_type  : 演算タイプ
// error_stop : 0除算フラグ (= 0, 0:停止しない / 1:停止する)
calc_ary ans_ary, ary1, ary2, calc_type, error_stop


// 配列演算継続命令
//
calc_continue

------------------------------------------------------------

// 多次元配列変数の書き出し
//
// p1 : 中身を受け取る文字列型変数
// p2 : 多次元配列変数
// p3 : コメント（省略可）
priarray p1, p2, p3


// 多次元配列変数一括代入
//
// p1 : 代入先の配列変数
// p2 : 代入したい値
// p3 : indexフラグ(= 0)
// p4 : 増減値
setarray p1, p2, p3, p4


// 多次元配列変数の値書き出し
//
// p1 : 配列変数の中身を受け取る文字列型変数
// p2 : 配列変数
// iflag : ラベルフラグ
outarray p1, p2


// 多次元配列に変換する
//
// ary    : 変換先 変数名
// in_val : 変換元 変数名
// type   : 変換先の型を表す数値  (= 2, 2:文字列型 / 3:実数型 / 4:整数型)
// d1,d2,d3,d4 : 変換後の各次元要素数 (= 0)
cnvarray ary, in_val, type, d1, d2, d3, d4


// ラベル型配列変数生成
//
// hyouj  : 書き出し先の複数行文字列型変数
// ary    : 書き出す文字列型配列変数
// in_val : 代入値またはそれを格納した変数
// index  : 増減値
labarray hyouj, ary, in_val, index

------------------------------------------------------------

// sortgetの関数バージョン
//
// p1 : インデックスNO.
sortgetc p1


// 一方の配列のソートに合わせて他方もソート
//
// ary1 : 主配列(メイン)
// ary2 : 副配列(ary1に合わせてソートする配列)
// p1   : 昇降順
twinsortary ary1, ary2, p1


// 二分木探索命令
//
// item_    : 探す値
// srch_lis : 探す場所（1次元配列変数)     ※注意!※ 昇順ソートされている事が前提!!
// srch_    : 探す場所の配列要素数を受け取る変数
bisrch item_, srch_lis, srch_


// ラベル名･モジュール名取得関数
//
// modlab_var : ラベル型もしくはモジュール型変数
modlabget modlab_var



# 導入方法
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
.
├─ 02_myarray.hsp
│
├── 02_myarray
│   ├── 02_myarray.hs
│   ├── 02_1_PriSetOut.hsp
│   ├── 02_2_CnvOut.hsp
│   ├── 02_3_Cnv.hsp
│   ├── 02_4_Lab.hsp
│   ├── 02_5_Ctl.hsp
│   ├── 02_6_Calc.hsp
│   └── 02_myarray.txt
│
├── README.md
└── License.txt

* 02_myarray.hspをユーザースクリプトのディレクトリか、HSPのインストールディレクトリ下の
	commonフォルダ内において、02_myarray.hspをインクルードしてください。

	例） hsp37/common/02_myarray.hsp


* 02_myarrayフォルダをHSPのインストールディレクトリ下にあるdoclibフォルダ内に02_myarray
	フォルダごと置いて下さい。サンプルファイルもそのままで構いません。

	例） hsp37/doclib/02_myarray


# ライセンス等
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

本ソフトウェアおよび関連文書のファイル（以下「ソフトウェア」）の複製を取得するすべての
人に対し、ソフトウェアを無制限に扱うことを無償で許可します。

これには、ソフトウェアの複製を使用、複写、変更、結合、掲載、頒布、サブライセンス、
および/または販売する権利、およびソフトウェアを提供する相手に同じことを許可する
権利も無制限に含まれます。

ソフトウェアは「現状のまま」で、明示であるか暗黙であるかを問わず、何らの保証もなく
提供されます。ここでいう保証とは、商品性、特定の目的への適合性、および権利非侵害
についての保証も含みますが、それに限定されるものではありません。

作者または著作権者は、契約行為、不法行為、またはそれ以外であろうと、ソフトウェアに起因
または関連し、あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請求、
損害、その他の義務について何らの責任も負わないものとします。


# 更新履歴
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

ver 0.27.3
2023/01/21

/*** 新規追加命令･関数 ***/

 * calc_ary 命令
	* 配列演算 (四則演算、剰余、割増･割引計算、カスタム可)
 * calc_continue命令
	* 演算継続命令


/*** その他 ***/

スクリプトの整備･修正



ver 0.27
2023/01/09

/*** 新規追加命令･関数 ***/

* dimlinec 関数
	* 各次元要素数から配列の先頭からのオフセット値を返す
* linedim 命令
	* 配列の先頭からのオフセット値を各次元要素数に変換

* ctlarray_start 命令
	* ctlarrayの動作制御フィールドの開始
* ctlarray_end 命令
	* ctlarrayの動作制御フィールドの終了
* ctlexcld 命令
	* 動作制御フィールド内で制御の除外を行う


/*** その他 ***/

動作制御命令 ctlarray命令の調整
よく使う処理やイテレーター等の関数･命令化
モジュール内で使用する変数の一部変数名を修正
スクリプトの整備･修正



ver 0.26.3
2022/12/30

priarray命令のラベル名取得機能完成
また、同命令にモジュール型変数の指定時、モジュール名及び関連情報の表示機能を仮搭載 (※未完成)

labarray命令の追加に伴い、setarray命令をラベル型変数非対応に
このバージョンからラベル型変数対応命令は priarray, outarray の2つとなる

エラーレポート機能の廃止

/*** 新規追加命令･関数 ***/

 * ctlarray 命令
	* priarray, setarray, outarray, labarray命令の各動作範囲を制御する
	(※試作段階のもので、本バージョンから試験導入)

(※以下、本モジュールの〜array命令を補佐する付随命令･関数)

 * sortgetc 関数
	* sortgetの関数バージョン

 * twinsortary 命令
	* 一方の配列のソートに合わせて他方もソート

 * bisrch 命令
	* 二分木探索を行う

 * modlabget 関数
	* ラベル名･モジュール名取得

#その他#

モジュール内で使用する変数の変数名及び各命令･関数のエイリアス名の見直し
strf関数用書式文字列格納変数にモジュール情報用の書式追加（仮）
スクリプトの整備･修正


ver 0.26.1
2022/12/20
priarray命令にラベル型配列変数のラベル名表示機能を追加（2022/12/18現在、最適化できておらず）

/*** 新規追加命令 ***/

* outarray命令の追加
	* 多次元配列変数の値のみを複数行文字列として書き出す
* cnvarray命令の追加
	* 複数行文字列、多次元配列変数を別の多次元配列変数へ変換する
* labarray命令の追加
	* 文字列型配列変数を複数行文字列として書き出し、ラベル型に変換する

その他
スクリプトの修正
コメント表示の書式微修正
内部関数 ainfo_関数の命令化


ver 0.25
2022/12/07
書き出し命令 priarray命令にコメント機能の追加
一括代入命令 setarray命令に増減機能の追加
一部コードの改修

ver 0.24
2022/12/05
多次元配列変数への一括代入setarray命令の追加
値の書き出しができないラベル型、モジュール型、COMオブジェクト型を指定した際に
変数の使用状況（varuse関数）とエラーレポートを表示する機能を追加

ver 0.23
2022/12/04
書き出し方法の大幅改良
一部スクリプトの最適化

ver 0.22
2022/12/01
配列情報の表示方法の変更

ver 0.21
2022/11/29
パラメータの修正

ver 0.20
2022/11/26
ヘッダファイル、サンプルファイルの修正

ver 0.10
2022/11/25
製作開始.