// INFO ************************************************************************
// FileName : 02_myarray.hsp
// Version  : 0.23
// Date     : 2022/12/04
// Author   : YUZRANIUM（ゆずらにうむ）
// Twitter  : https://twitter.com/YUZRANIUM
// GitHub   : https://github.com/YUZRANIUM/02_myarray
// *****************************************************************************
/* Description
 HSP3で多次元配列を確認用に文字列として書き出すなんてことないモジュールです。

    このモジュールはHSPTV!掲示板の皆様によって支えられております。
    この場を借りて感謝申し上げます。誠に有難うございます。

    ***  掲示板情報  ***
    kind    : 宣伝
    date    : 2022/11/26
    person  : Yuzranium
    content : 多次元配列変数を複数行文字列に
********************************************************************************/


#ifndef __myarray__
#define global __myarray__

#module "myarray"



//----------------------------------------------------------
//配列変数の情報表示用
//----------------------------------------------------------

// p1 : 配列変数の中身を受け取る文字列型変数 ( array information )
// p2 : 配列変数
// p3 : 変数名
// p4 : 行数
#defcfunc local ainfo_ array p2, str p3, int p4

    ; 配列書き出し 分岐用ラベル    *未対応の型, *1次元, *2次元, *3次元, *4次元
    ;
    view_ = *not_vartype@myarray, *Dimention_1@myarray, *Dimention_2@myarray, *Dimention_3@myarray, *Dimention_4@myarray

    ; 配列情報表示 分岐用ラベル    *1次元, *2次元, *3次元, *4次元
    ;
    vinfo_ = *D1_info@myarray, *D2_info@myarray, *D3_info@myarray, *D4_info@myarray

    ; 変数の型表示    要素には vartype関数を用いて利用します
    ; ラベル型、モジュール型は書き出せませんが、変数の情報だけは取得できるのでとりあえず
    ;
    tinfo_ = "", "label", "str", "double", "int", "struct", "comobj"

    ; 使用次元の確認
    ;
    prinfo_ = (length4(p2) != 0) + (length3(p2) != 0) + (length2(p2) != 0) + (length(p2) != 0) - 1

    gosub vinfo_@myarray(prinfo_@myarray)       ; ラベルジャンプで分岐

    return

//-------------------------------  配列情報表示  -------------------------------//

    ; [ 変数名 ] 型(1次元要素, 2次元要素, 3次元要素, 4次元要素) L=行数

*D4_info@myarray
    return strf("[%s ] %s(%d, %d, %d, %d) L=%d\n", p3, tinfo_@myarray(vartype(p2)), length(p2), length2(p2), length3(p2), length4(p2), p4)

*D3_info@myarray
    return strf("[%s ] %s(%d, %d, %d) L=%d\n", p3, tinfo_@myarray(vartype(p2)), length(p2), length2(p2), length3(p2), p4)

*D2_info@myarray
    return strf("[%s ] %s(%d, %d) L=%d\n", p3, tinfo_@myarray(vartype(p2)), length(p2), length2(p2), p4)

*D1_info@myarray
    return strf("[%s ] %s(%d) L=%d\n", p3, tinfo_@myarray(vartype(p2)), length(p2), p4)





//----------------------------------------------------------
//配列変数の書き出し用内部命令
//----------------------------------------------------------

// n次元配列変数の書き出し
//
// p1 : 配列変数の中身を受け取る文字列型変数
// p2 : 配列変数
#deffunc local priarray_dx var p1, array p2, str p3, int p4

    ; 配列情報表示用の内部関数
    ;
    p1 += ainfo_@myarray(p2, p3, p4)

    ; ラベル型、モジュール型変数はこの方法では書き出せない（エラーになる）ので書き出しを実行させずに return させる
    ;
    if (vartype(p2) == 1) | (vartype(p2) == 5) | (vartype(p2) == 6)  :  goto view_@myarray(0)

    ; 各次元要素の保持
    ;
    alldim = length(p2), length2(p2), length3(p2), length4(p2)

    ; 各次元の使用状況を 0, 1 で表現
    ;
    usedim = (alldim(0) != 0) + (alldim(1) != 0) + (alldim(2) != 0) + (alldim(3) != 0)

    ; 配列数合計
    sum = 1
    repeat 4
        if (alldim(cnt) = 0) { break }
        sum *= alldim(cnt)
    loop

    ; 書き出し
    repeat sum
        j = cnt
        repeat usedim
            num = j
            repeat cnt
                num /= alldim(cnt)
            loop
            i(cnt) = num \ alldim(cnt)
        loop
        gosub view_@myarray(usedim)      ; ラベルジャンプで分岐
    loop


; 未対応の型はこちらへ
*not_vartype@myarray
    p1 += "\n"      ; 次の配列変数表示のための改行
    return



//-------------------------------  配列書き出し  -------------------------------//

; 1次元配列
*Dimention_1@myarray
    p1 += strf("(%d) = %s\n", i(0), p2(i(0)))
    return

; 2次元配列
*Dimention_2@myarray
    p1 += strf("(%d, %d) = %s\n", i(0), i(1), p2(i(0), i(1)))
    return

; 3次元配列
*Dimention_3@myarray
    p1 += strf("(%d, %d, %d) = %s\n", i(0), i(1), i(2), p2(i(0), i(1), i(2)))
    return

; 4次元配列
*Dimention_4@myarray
    p1 += strf("(%d, %d, %d, %d) = %s\n", i(0), i(1), i(2), i(3), p2(i(0), i(1), i(2), i(3)))
    return




//##############################################################################
//                               <<  マクロ  >>
//##############################################################################


//----------------------------------------------------------
// 多次元配列書き出しマクロ
//----------------------------------------------------------

// 多次元配列変数の書き出し
//
// p1 : 配列変数の中身を受け取る文字列型変数
// p2 : 配列変数
#define global priarray(%1,%2,%3=__line__) priarray_dx@myarray %1,%2,"%2",%3

    // "%2"         : 変数名を表示させるための幻の第3パラメータです
    //              : マクロ展開時、ダブルクオーテーションに囲まれた状態で
    //              : 展開されるので文字列として内部命令に渡すことができています
    //              : これは仕様なのでしょうか?


#global // myarray

#endif // __myarray__