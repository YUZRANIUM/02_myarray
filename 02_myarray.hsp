// INFO ****************************************************
// FileName : 02_myarray.hsp
// Version  : 0.22
// Date     : 2022/12/01
// Author   : YUZRANIUM（ゆずらにうむ）
// Twitter  : https://twitter.com/YUZRANIUM
// GitHub   : https://github.com/YUZRANIUM/02_myarray
// *********************************************************
/* Description
 HSP3で多次元配列を確認用に文字列として書き出す
 なんてことないモジュールです。
************************************************************/


#ifndef __myarray__
#define global __myarray__


#module "MyArray"



//----------------------------------------------------------
//配列変数の情報表示用
//----------------------------------------------------------


// p1 : 配列変数の中身を受け取る文字列型変数
// p2 : 配列変数
// p3 : 変数名
// p4 : 行数
#defcfunc local ainfo_ var p1, array p2, str p3, int p4

	; * デバッグウィンドウのように変数の型表示を追加してみました
	;   str型の変数に "123" などとして書き出した場合、int型と区別がつかなくなるためです
	;
	if      (vartype(p2) == 2) {vinfo_ = "str"}
	else:if (vartype(p2) == 3) {vinfo_ = "double"}
	else:if (vartype(p2) == 4) {vinfo_ = "int"}


	if      (length4(p2) != 0) {
		return strf("[%s ] %s(%d, %d, %d, %d) %d L=%d\n", p3, vinfo_@MyArray, length(p2), length2(p2), length3(p2), length4(p2), varsize(p2), p4)
	}
	else:if (length3(p2) != 0) {
		return strf("[%s ] %s(%d, %d, %d) %d L=%d\n", p3, vinfo_@MyArray, length(p2), length2(p2), length3(p2), varsize(p2), p4)
	}
	else:if (length2(p2) != 0) {
		return strf("[%s ] %s(%d, %d) %d L=%d\n", p3, vinfo_@MyArray, length(p2), length2(p2), varsize(p2), p4)
	}
	else:if (length(p2)  != 0) {
		return strf("[%s ] %s(%d) %d L=%d\n", p3, vinfo_@MyArray, length(p2), varsize(p2), p4)
	}

	; p1に格納される書式
	;
	; [ 変数名 ] 型(1次元要素, 2次元要素, 3次元要素, 4次元要素) バッファサイズ L=行数




//----------------------------------------------------------
//4次元配列変数
//----------------------------------------------------------


// 4次元配列変数の書き出し
//
// p1 : 配列変数の中身を受け取る文字列型変数
// p2 : 配列変数
#deffunc local priarray4_ var p1, array p2, str p3, int p4
	;
	; 配列情報表示用の内部関数
	;
	p1 += ainfo_@MyArray(p1, p2, p3, p4)

	i = 0, 0, 0, 0                      ; 次元要素カウンタ

	repeat length4(p2)      ; 第4次元
		i(2) = 0

		repeat length3(p2)      ; 第3次元
			i(1) = 0

			repeat length2(p2)      ; 第2次元
				i(0) = 0

				repeat length(p2)       ; 第1次元

					p1 += "(" + i(0) + ", " + i(1) + ", " + i(2) + ", " + i(3) + ") = " + p2(i(0), i(1), i(2), i(3)) + "\n" ; これで1行

					i(0)++
				loop                    ; 第1次元

				i(1)++
			loop                   ; 第2次元

			i(2)++
		loop                    ; 第3次元

		i(3)++
	loop                    ; 第4次元

	p1 += "\n"      ; 次の配列表示のための改行。 最終行の後は上のものと合わせて2行分空行ができます
	return




//----------------------------------------------------------
//3次元配列変数
//----------------------------------------------------------


// 3次元配列変数の書き出し
//
// p1 : 配列変数の中身を受け取る文字列型変数
// p2 : 配列変数
#deffunc local priarray3_ var p1, array p2, str p3, int p4

	p1 += ainfo_@MyArray(p1, p2, p3, p4)

	i = 0, 0, 0, 0

	repeat length3(p2)
		i(1) = 0

		repeat length2(p2)
			i(0) = 0

			repeat length(p2)

				p1 += "(" + i(0) + ", " + i(1) + ", " + i(2) + ") = " + p2(i(0), i(1), i(2)) + "\n"

				i(0)++
			loop

			i(1)++
		loop

		i(2)++
	loop

	p1 += "\n"
	return



//----------------------------------------------------------
//2次元配列変数
//----------------------------------------------------------


// 2次元配列変数の書き出し
//
// p1 : 配列変数の中身を受け取る文字列型変数
// p2 : 配列変数
#deffunc local priarray2_ var p1, array p2, str p3, int p4

	p1 += ainfo_@MyArray(p1, p2, p3, p4)

	i = 0, 0, 0, 0

	repeat length2(p2)
		i(0) = 0

		repeat length(p2)

			p1 += "(" + i(0) + ", " + i(1) + ") = " + p2(i(0), i(1)) + "\n"

			i(0)++
		loop

		i(1)++
	loop

	p1 += "\n"
	return



//----------------------------------------------------------
//1次元配列変数
//----------------------------------------------------------


// 1次元配列変数の書き出し
//
// p1 : 配列変数の中身を受け取る文字列型変数
// p2 : 配列変数
#deffunc local priarray1_ var p1, array p2, str p3, int p4

	p1 += ainfo_@MyArray(p1, p2, p3, p4)

	i = 0, 0, 0, 0

	repeat length(p2)

		p1 += "(" + i(0) + ") = " + p2(i(0)) + "\n"

		i(0)++
	loop

	p1 += "\n"
	return





//----------------------------------------------------------
//条件分岐マクロ
//----------------------------------------------------------


// 多次元配列変数の書き出し
//
// p1 : 配列変数の中身を受け取る文字列型変数
// p2 : 配列変数
#define global priarray(%1,%2,%3=__line__)\
	if      (length4(%2) != 0) {priarray4_@MyArray %1,%2,"%2",%3}\
	else:if (length3(%2) != 0) {priarray3_@MyArray %1,%2,"%2",%3}\
	else:if (length2(%2) != 0) {priarray2_@MyArray %1,%2,"%2",%3}\
	else:if (length(%2)  != 0) {priarray1_@MyArray %1,%2,"%2",%3}

	// "%2"         : 変数名を表示させるための幻の第3パラメータです
	//              : マクロ展開時、ダブルクオーテーションに囲まれた状態で
	//              : 展開されるので文字列として内部命令に渡すことができています
	//              : これは仕様なのでしょうか?


#global // MyArray

#endif // __myarray__