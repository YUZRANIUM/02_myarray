; INFO ************************************************************************
; FileName : 02_myarray.hsp
; Version  : 0.28
; Date     : 2023/02/01
; Author   : YUZRANIUM（ゆずらにうむ）
; Twitter  : https://twitter.com/YUZRANIUM
; GitHub   : https://github.com/YUZRANIUM/02_myarray
;*******************************************************************************
/* Description
 多次元配列をなんやかんやするモジュールです。おまけ付きです

	このモジュールはHSPTV!掲示板の皆様によって支えられております。
	この場を借りて感謝申し上げます。誠に有難うございます。

	***  掲示板情報  ***
	kind    : 宣伝
	date    : 2023/01/16
	person  : Yuzranium
	content : 多次元配列をなんやかんやする

	***  掲示板情報 (過去ログ)  ***
	date    : 2022/11/26
	content : 多次元配列変数を複数行文字列に

* 各モジュールの優先順位
1. _core
2. _list
3. _srch
4. myarray(無印)
********************************************************************************/

	; 開発用ディレクトリ
	#addition "C:\\gitproject\\doclib\\02_myarray_core.hsp"
	#addition "C:\\gitproject\\doclib\\02_myarray_list.hsp"
	#addition "C:\\gitproject\\doclib\\02_myarray_srch.hsp"

	; ユーザー用
	#addition "02_myarray_core.hsp"
	#addition "02_myarray_list.hsp"
	#addition "02_myarray_srch.hsp"

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  mytool ここから  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
#ifndef __my_tool__
#define global __my_tool__


#module "mytool"

	; mytool モジュールの内部変数の初期化
	; このファイルの最下部で呼び出しておりますので、特別呼び出す必要はありません。
	;
#deffunc local _mytool_init_

	sdim hoge
	sdim hyouj_, 1024

	sdim midlevar_, 1024 ; マクロでの仲介用変数
	sdim indexvar_, 1024 ; マクロでの仲介用変数
	return


;===========================================================
	;objprm のハンドル指定版(内部命令)
	;
	;		objprh objhwnd_, objprmdata_
	;
	;		[ int ] objhwnd_     : オブジェクトハンドル
	;		[ var ] obj_prmdata_ : 変更するパラメータ
	;
	;	*** comment ***
	;		この命令はウィンドウごとに管理されているウィンドウID
	;		ではなくオブジェクトハンドルを使用することで
	;		gsel命令で描画先ウィンドウを管理する手間を省くために作りました
	;
#deffunc local objprh_ int objhwnd_, var obj_prmdata_
	sendmsg objhwnd_, $C, 0, obj_prmdata_
	sdim midlevar_, 1024
	return

;-----------------------------------------------------------

#define global objprh(%1,%2)\
	midlevar_@mytool=%2:\
	objprh_@mytool %1,midlevar_@mytool


;===========================================================
	; 変数名と行数表示
	;
	; vname    : 変数名 (マクロから)
	; linenum  : 行  数 (マクロから)
	; idx_list : 配列の要素数を格納した変数名やcntなど (マクロから)
	; ----------------------------
	; v1       : 表示させたい値
	;
#deffunc local logpri_ str vname, int lineunm, var v1, array idx_list
	; 左端の半角スペースのトリミング
	hoge = vname : hoge = strtrim(hoge, 1,)
	repeat 4:   idx_list(cnt + 4) = strtrim(idx_list(cnt + 4), 1,)   :loop

	hyouj_ = strf("/*** %d ***/\n%s = %s\n", lineunm, hoge, v1)

	; ループ内でよく用いられる cnt, i++, j++, k++ 等のカウンタを数値に置換
	repeat 4:   strrep hyouj_, str(idx_list(cnt + 4)), str(idx_list(cnt))   :loop

	logmes hyouj_
	return

;-----------------------------------------------------------
	; 変数名と行数表示
	;
	;	logpri v1(d1, d2, d3, d4),   d1, d2, d3, d4
	;
	; v1          : 表示させたい値
	; d1,d2,d3,d4 : 要素数格納用変数
#define global logpri(%1,%2=-1,%3=-1,%4=-1,%5=-1)\
	midlevar_@mytool=%1:\
	indexvar_@mytool(0)=str(%2),str(%3),str(%4),str(%5):\
	indexvar_@mytool(4)="%2","%3","%4","%5":\
	logpri_@mytool "%1",__line__,midlevar_@mytool,indexvar_@mytool

	; indexvar_
	; 0, 1, 2, 3 / 置換する値
	; 4, 5, 6, 7 / 検索される文字列


;===========================================================
	; logpri の mes バージョン
	;
	; vname    : 変数名 (マクロから)
	; idx_list : 配列の要素数を格納した変数名やcntなど (マクロから)
	; ----------------------------
	; hyouj    : 内容を読み出す文字列型変数名
	; v1       : 表示させたい値
	;
#deffunc local mesans_ str vname, var hyouj, var v1, array idx_lst

	; 左端の半角スペースのトリミング
	hoge = vname : hoge = strtrim(hoge, 1)
	repeat 4:   idx_lst(cnt + 4) = strtrim(idx_lst(cnt + 4), 1,)   :loop

	hyouj += strf("%s = %s", hoge, str(v1))

	; ループ内でよく用いられる cnt, i++, j++, k++ 等のカウンタを数値に置換
	repeat 4:   strrep hyouj, str(idx_lst(cnt + 4)), str(idx_lst(cnt))   :loop
	hyouj += "\n"
	return


;-----------------------------------------------------------
	; logpri の mes バージョン
	;
	;	mesans hyouj,   v1(d1, d2, d3, d4),   d1, d2, d3, d4
	;
	; hyouj       : 内容を読み出す文字列型変数名
	; v1          : 表示させたい値
	; d1,d2,d3,d4 : 配列の要素数を格納した変数名やcntなど
#define global mesans(%1,%2,%3=-1,%4=-1,%5=-1,%6=-1)\
	midlevar_@mytool=%2:\
	indexvar_@mytool(0)=str(%3),str(%4),str(%5),str(%6):\
	indexvar_@mytool(4)="%3","%4","%5","%6":\
	mesans_@mytool "%2",%1,midlevar_@mytool,indexvar_@mytool

	; indexvar_
	; 0, 1, 2, 3 / 置換する値
	; 4, 5, 6, 7 / 検索される文字列

#global // mytool
#endif  //__my_tool__
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  mytool ここまで  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%//



//%%%%%%%%%%%%%%%%%%%%%%%%%  本体は ここから [EOF]まで  %%%%%%%%%%%%%%%%%%%%%%%//

#ifndef __myarray__
#define global __myarray__

#module "myarray"

#const STRUCTDAT_SIZE 28
#const PRM_STACK      207

	; 内部変数の初期化
	; このファイルの最下部で使用しておりますので特別、呼び出す必要はありません
	;
#deffunc local _myarray_init_

	; 分岐用ラベル
	; *未対応の型, *1次元, *2次元, *3次元, *4次元
	;
	ldim jump_, 5, 7
		; (0, 0) 配列雑多処理 * 使用箇所 : ainfo_
		; (0, 1) 配列情報書出 * 使用箇所 : priarray_dx
		; (0, 2) 配列連続代入 * 使用箇所 : setarray_
		; (0, 3) 配列書き出し * 使用箇所 : outarray_
		; (0, 4) 配列読み込み * 使用箇所 : cnvarray_
		; (0, 5) ラベル型量産 * 使用箇所 : labarray_
		; (0, 6) 配列四則演算 * 使用箇所 : calc_ary_
	jump_(0, 0) = *notvarinfo@myarray, *D1_aryinfo@myarray, *D2_aryinfo@myarray, *D3_aryinfo@myarray, *D4_aryinfo@myarray
	jump_(0, 1) = *not_varpri@myarray, *priarray_1@myarray, *priarray_2@myarray, *priarray_3@myarray, *priarray_4@myarray
	jump_(0, 2) = *not_varset@myarray, *setarray_1@myarray, *setarray_2@myarray, *setarray_3@myarray, *setarray_4@myarray
	jump_(0, 3) = *not_varout@myarray, *outarray_1@myarray, *outarray_2@myarray, *outarray_3@myarray, *outarray_4@myarray
	jump_(0, 4) = *not_varcnv@myarray, *cnvarray_1@myarray, *cnvarray_2@myarray, *cnvarray_3@myarray, *cnvarray_4@myarray
	jump_(0, 5) = *not_varlab@myarray, *labarray_1@myarray, *labarray_2@myarray, *labarray_3@myarray, *labarray_4@myarray
	jump_(0, 6) = *not_varcal@myarray, *calc_ary_1@myarray, *calc_ary_2@myarray, *calc_ary_3@myarray, *calc_ary_4@myarray

	; 分岐用ラベル calc_ary (cpu_ary_) (1250行以降で使用)
	ldim cpu_jump, 15
	cpu_jump(0) = *calc_typ_0@myarray, *calc_typ_1@myarray, *calc_typ_2@myarray, *calc_typ_3@myarray, *calc_typ_4@myarray
	cpu_jump(5) = *calc_typ_5@myarray, *calc_typ_6@myarray, *calc_typ_7@myarray, *calc_typ_8@myarray, *calc_typ_9@myarray
	cpu_jump(10) = *calc_typ_10@myarray, *calc_typ_11@myarray, *calc_typ_12@myarray, *calc_typ_13@myarray, *calc_typ_14@myarray

	; ##########################################################################
	; *** 変数の型名表示 ***
	; * 変数の型名を変更する場合はこちらを編集して下さい
	; ※配列で管理しているのでvartypeで取得する数値と要素数を一致させる必要があります
	; 例）vtype_names(vartype(ary))
	;
	; * 使用箇所: 配列の情報表示 ainfo_    分岐ラベル *D1_aryinfo 〜 *D4_aryinfo
	;
	vtype_names = "", "label", "str", "double", "int", "struct", "comobj"

	; ##########################################################################
	; strf関数用書式文字列
	; *以降の命令・関数内で使用するstrf関数の書式指定文字列は下の変数で管理しています
	; *書式の変更を行いたい場合はこちらを編集して下さい
	sfrmt = ""
	sdim sfrmt, 1024, 4, 6

		; ==========================================================================
		; *** 配列の情報表示 ***
		; [ 変数名 ] 型名(1次元要素, 2次元要素, 3次元要素, 4次元要素) L=行数
		; 例）[ ary ] str(5, 4, 3, 2) L=85
		;
		; * 使用箇所: 配列の情報表示 ainfo_   分岐ラベル *D1_aryinfo 〜 *D4_aryinfo
		;
	sfrmt(0, 0) = "[ %s ] %s(%d) L=%s\n"
	sfrmt(1, 0) = "[ %s ] %s(%d, %d) L=%s\n"
	sfrmt(2, 0) = "[ %s ] %s(%d, %d, %d) L=%s\n"
	sfrmt(3, 0) = "[ %s ] %s(%d, %d, %d, %d) L=%s\n"

		; ==========================================================================
		; *** 配列の書き出し ***
		; (1次元要素, 2次元要素, 3次元要素, 4次元要素) = 実際の数値
		; 例）(0, 0, 0, 0) = ABCDE
		; 例）(0, 0, 0, 0) = 12345
		;
		; * 使用箇所: 配列書き出し priarray_dx   分岐ラベル *priarray_1 〜 *priarray_4
		;
	sfrmt(0, 1) = "(%d)" + " = %s\n"
	sfrmt(1, 1) = "(%d, %d)" + " = %s\n"
	sfrmt(2, 1) = "(%d, %d, %d)" + " = %s\n"
	sfrmt(3, 1) = "(%d, %d, %d, %d)" + " = %s\n"

		; ==========================================================================
		; *** 配列の書き出し未対応の型(モジュール型、COMオブジェクト型) ***
		; (1次元要素, 2次元要素, 3次元要素, 4次元要素): varuse [(0x)varptr]
		; 例）(0, 0, 0, 0): 0 [0x12345]
		; 例）(0, 0, 0, 0): 1 [0xabcde]
		;
		; * 使用箇所: 配列書き出し priarray_dx   分岐ラベル *priarray_1 〜 *priarray_4
		;
	sfrmt(0, 2) = "(%d)" + " = %s\n"
	sfrmt(1, 2) = "(%d, %d)" + " = %s\n"
	sfrmt(2, 2) = "(%d, %d, %d)" + " = %s\n"
	sfrmt(3, 2) = "(%d, %d, %d, %d)" + " = %s\n"

		; ==========================================================================
		; *** 配列の情報表示 labarray仕様 *** 行数ダミーの%d
		; dimtype 変数名, 1, 1次元要素, 2次元要素, 3次元要素, 4次元要素
		; 例）dimtype ary, 1, 5, 4, 3, 2
		;
		; * 使用箇所: 配列の情報表示 ainfo_   分岐ラベル *D1_aryinfo 〜 *D4_aryinfo
		;
	sfrmt(0, 3) = "\tdimtype %s, vartype(\"%s\"), %d%s"
	sfrmt(1, 3) = "\tdimtype %s, vartype(\"%s\"), %d, %d%s"
	sfrmt(2, 3) = "\tdimtype %s, vartype(\"%s\"), %d, %d, %d%s"
	sfrmt(3, 3) = "\tdimtype %s, vartype(\"%s\"), %d, %d, %d, %d%s"

		; ======================================================================
		; *** コメント機能 ***
		; ((  配列情報  ))
		; /*------------------------------
		; 何かしらのコメント
		; ------------------------------*/
		; ((  値一覧  ))
		;
		; * 使用箇所: 雑多内部命令 ainfo_
		;
	sfrmt(0, 4) = "/*------------------------------\n%s\n------------------------------*/\n"

		; ======================================================================
		; *** モジュール型変数情報表示用 *** (2023/01/15 現在工事中) ※使用可能
		;
		; STRUCTDAT構造体
		; --------------------------------------------------
		; index     = SD & $FF ; base LIBDAT index
		; subid     = SD >> 16 ; struct index
		; primindex = SD.1     ; STRUCTPRM index(MINFO)
		; prmmax    = SD.2     ; number of STRUCTPRM
		; nameidx   = SD.3     ; name index  (DS)
		; size      = SD.4     ; struct size (stack)
		; otindex   = SD.5     ; OT index    (Module)
		; --------------------------------------------------
	sfrmt(0, 5) = {"
		----------------STRUCTDAT
		index     %d
		subid     %d
		primindex %d
		prmmax    %d
		nameidx   %d
		size      %d
		otindex   %d
	"}
		; PVAL構造体
	sfrmt(1, 5) = {"
		----------------------PVAL
		flag      %d
		mode      %d
		len       %d, %d, %d, %d, %d
		size      %d
		ary ptr   0x%08x (%d)
	"}
		; STRBUF構造体
	sfrmt(2, 5) = {"
		--------------------STRBUF
		Flag      %d
		exFlag    %d
		myblock   %d
		size      %d
		ptr       0x%08x (%d)
		exptr     0x%08x (%d)
		opt       0x%08x (%d)
		--------------------------
	"}

	; ##########################################################################
	; ラベルリスト作成の際、除外したいラベルに含まれている文字列を登録する
	; こちらに登録した文字列が含まれているラベル名はアドレスポインタ共々除外されます。
	;
	excld_list = "_exit", "_boot", "@"

	; ######################################################
	; 動作制御配列
	; ------------------------------------------------------
	; ctl_ary(0)  : 複数制御フラグ
	;
	; ctl_ary(1)  : 対象となる動作を開始する 配列のオフセット値
	; ctl_ary(2)  : 対象となる動作を終了する       //
	;
	; ctl_ary(3)  : 単体制御フラグ
	; ctl_ary(4)  : 除外フラグ
	;
	; ctl_ary(5)  : 真偽値 (オフセット値: (0 <= 開始値) & (開始値 <= 終了値) )
	; ctl_ary(6)  : 真偽値 (複数制御あり & 除外    あり & 制御コア1回目の呼び出し) | (制御なし)
	; ctl_ary(7)  : 真偽値 (複数制御あり & 除外    あり & 制御コア2回目の呼び出し)
	; ctl_ary(8)  : 真偽値 (複数制御なし & 単体制御あり & 制御コア2回目の呼び出し)
	;
	; ctl_ary(9)  : ctl_ary(1)
	; ctl_ary(10) : 配列の長さ - ctl_ary(1)
	; ------------------------------------------------------
	ctl_ary = 0 : dim ctl_ary, 11

	; ######################################################
	; 配列情報
	; ------------------------------------------------------
	; ary_inf(0) : length()  (1次元要素数) (旧 : all_dim)
	; ary_inf(1) : length2() (2次元要素数)
	; ary_inf(2) : length3() (3次元要素数)
	; ary_inf(3) : length4() (4次元要素数)
	;
	; ary_inf(4) : 使用次元数 (1, 2, 3, 4) (旧 : use_dim)
	; ary_inf(5) : 配列の長さ              (旧 : sum_dim)
	;
	; ary_inf(6) : 配列の現在位置          (旧 : num_)
	; ------------------------------------------------------
	ary_inf = 0 : dim ary_inf, 7

	; ######################################################
	; if-else での型分岐用
	; ------------------------------------------------------
	; vtype(0) : ラベル型 | モジュール型
	; vtype(1) : ラベル型
	; vtype(2) : 文字列型
	; vtype(3) : 実数型
	; vtype(4) : 整数型
	; vtype(5) : モジュール型
	; vtype(6) : COMオブジェクト型
	; ------------------------------------------------------
	vtype = 0 : dim vtype, 7

	; ##########################################################################
	; 配列演算継続フラグ
	;
	calc_add_flag = 0 : dim calc_add_flag

	sdim pri_holder_, 4096    ; priarray 命令内で使用する文字列型変数
	sdim out_holder_, 4096    ; outarray 命令内で使用する文字列型変数
	sdim cnv_holder_, 4096    ; cnvarray 命令内で使用する文字列型変数
	sdim lab_holder_, 4096    ; labarray 命令内で使用する文字列型変数

	sdim hogestr, 64 ; 文字列型一時保存用


;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;					HSPCTX･HSPHED 構造体
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	; 構造体の詳細はhspsdkフォルダのhsp3code.txt,hspdll.txtを参考
	; ※言語仕様としての注意※
	; 1) リリース時にはデバック情報はobj(ax)ファイルに書き込まれない(#cmpopt varname 1は使えない？)
	; ※hsp3_64未対応※

	/*****  hspctx構造体、hsphed構造体の準備  *****/

	dim hspctx
	mref hspctx, 68                     ; HSPのシステム情報(HSPCTX構造体)
	dupptr hsphed, hspctx(0), 96        ; AXヘッダ情報の詳細(HSPHED構造体)
	dupptr DS, hspctx(3), hsphed(7), 2  ; DS
	dupptr OT, hspctx(5), hsphed(9), 4  ; OT
	dupptr DI, hspctx(4), hsphed(11), 2 ; DI
	; dupptr MI, hspctx(209), hsphed(17)  ; MI モジュールに関する情報があるらしい?
	dupptr FI, hspctx(210), hsphed(15)

	sdim lab_names, 2048    ; ラベル名のリスト用
	sdim mod_names, 2048    ; モジュール名のリスト
	dim lab_ofset           ; ラベル名に対応するアドレスポインタ用

						;===================================
						; ラベル 関連
						;===================================

	/*****  ラベルリストの作成準備  *****/
	dim i, 7
	repeat
		if      (peek(DI, i) == 252) {i += 3 : continue}
		else:if (peek(DI, i) == 253) {i += 6 : continue}
		else:if (peek(DI, i) == 254) {i += 6 : continue}
		else:if (peek(DI, i) == 255) {i++    : break}
		else                         {i++    : continue}
	loop

	/*****  ラベルリストの作成  *****/
	repeat , i
		if peek(DI, cnt) = 255 : break
		hogestr = namegetc@myarray(lpeek(DI, cnt + 1) & $00FFFFFF)

		; 除外リストに登録されている文字列と部分一致した場合はスキップ
		if LiSrchc_@myarray_srch(hogestr, excld_list) : continue cnt + 6

		lab_names(i.2) = hogestr
		lab_ofset(i.2) = ofstgetc@myarray(wpeek(DI, cnt + 4))
		i(2)++
		continue cnt + 6
	loop

	/***  二分木探索用ソート  ***/
	twinsortary lab_ofset, lab_names, 0

						;===================================
						; モジュール 関連
						;===================================

	/*****  モジュール･関数関連 (2023/01/15 現在工事中) ※使用可能 *****/
	dim i, 7
	dim midlevar_, 7, int(hsphed.15 / STRUCTDAT_SIZE)

	repeat hsphed(15) / STRUCTDAT_SIZE
		dupptr SD, varptr(FI) + cnt * STRUCTDAT_SIZE, STRUCTDAT_SIZE
		if (SD & $FF) != 253 : continue

		m_primindex(i) = SD.1
		midlevar_(0, i) = (SD & $FF), (SD >> 16), SD.1, SD.2, SD.3, SD.4, SD.5
		mod_names(i) = namegetc@myarray(midlevar_(4, i))
		i++
	loop
	cnvarray_@myarray MInfo, midlevar_, 4, 7, i, 0, 0
	midlevar_ = 0

	return    // _myarray_init_




;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;							ポインタ関連
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

						;===================================
						; ラベル名、モジュール名取得関連
						;===================================

	; ラベル名･モジュール名文字列取得
	;
	; p1 : バッファのインデックス
#defcfunc local namegetc int p1, local res
	getstr res, DS, p1
	return res

	; ラベルポインタ取得
#defcfunc local ofstgetc int p1
	return hspctx(2) + OT(p1) * 2

						;===================================
						; PVAL, APTR 関連
						;===================================

	; PVALのポインタとAPTRを取得
#defcfunc local PVAL_ptrc_ var v1, int p1
	dupptr vptr, hspctx(PRM_STACK), 8, 4
	return vptr(p1)

	; 指定した変数のPVALポインタ値を取得
#define ctype PVALptrc(%1) PVAL_ptrc_@myarray(%1, 0)

	; 指定した(配列)変数のAPTR値を取得
#define ctype getAptrc(%1) PVAL_ptrc_@myarray(%1, 1)

	; v1で指定した変数に対するPVAL構造体の内容をaryで指定した変数にコピー
#deffunc get_PVAL array ary, var v1
	dim ary, 12
	dupptr PVAL, PVALptrc(v1), 48, 4
	memcpy ary, PVAL, 48
	return


;###############################################################################
	; ラベル名･モジュール名取得関数
	;
	; modlab_var : ラベル型もしくはモジュール型変数
	;
#defcfunc mlgetc var modlab_var

	dim hogeline, 4
	hogeline = 16, 4, (vartype(modlab_var) == 1), (vartype(modlab_var) == 5)

	dupptr clone, varptr(modlab_var), hogeline(hogeline(2))

	; 探索
	if      hogeline(2) {bisrch_@myarray_srch clone(0),   lab_ofset, sinfo}
	else:if hogeline(3) {bisrch_@myarray_srch clone(1), m_primindex, sinfo}

	; 探索結果に応じて分岐
	if      hogeline(2) & (sinfo != -1) {return "*" + lab_names(sinfo)}
	else:if hogeline(3) & (sinfo != -1) {return ""  + mod_names(sinfo)}
	else:if hogeline(2)                 {return "<null-label>"}
	else:if hogeline(3)                 {return "[not-found]" }


;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;					配列処理動作制御関連
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	; ctl_ary : 配列制御変数
	; ------------------------------------------------------
	; ctl_ary(0)  : 複数制御フラグ
	;
	; ctl_ary(1)  : 対象となる動作を開始する 配列のオフセット値
	; ctl_ary(2)  : 対象となる動作を終了する       //
	;
	; ctl_ary(3)  : 単体制御フラグ
	; ctl_ary(4)  : 除外フラグ
	;
	; ctl_ary(5)  : 真偽値 (オフセット値: (0 <= 開始値) & (開始値 <= 終了値) )
	; ctl_ary(6)  : 真偽値 (複数制御あり & 除外    あり & 制御コア1回目の呼び出し) | (制御なし)
	; ctl_ary(7)  : 真偽値 (複数制御あり & 除外    あり & 制御コア2回目の呼び出し)
	; ctl_ary(8)  : 真偽値 (複数制御なし & 単体制御あり & 制御コア2回目の呼び出し)
	;
	; ctl_ary(9)  : ctl_ary(1)
	; ctl_ary(10) : 配列の長さ - ctl_ary(1)
	; ------------------------------------------------------


;-----------------------------------------------------------
	; 複数制御開始命令
	;
#deffunc ctlarray_start
	dim ctl_ary, 11 : ctl_ary(0) = 1  ; 複数制御フラグ
	return


;-----------------------------------------------------------
	; 動作制御命令
	;
	; ctl_strat_ : 動作を開始する 配列のオフセット値 (1次元化要素数)
	; ctl_end_   : 動作を終了する 配列のオフセット値 (1次元化要素数)
	;
#deffunc ctlarray int ctl_start_, int ctl_end_

	; 複数制御フラグがOFF で呼び出された -> 単体制御ってこと〜!?
	if (ctl_ary(0) == 0) {dim ctl_ary, 11 : ctl_ary(3) = 1}

	ctl_ary(1) = ctl_start_, (ctl_end_ + 1 - ctl_start_)
	ctl_ary(5) = (0 <= ctl_start_) & (ctl_start_ <= ctl_end_)
	return


;-----------------------------------------------------------
	; 動作除外命令
	;
#deffunc ctlexcld
	if (ctl_ary(0) == 1) {ctl_ary(4) = 1} ; 動作の除外フラグを立てる
	return


;-----------------------------------------------------------
	; 内部動作制御コア
	;
	; p1 : 開始値と終了値の2回呼び出すことになるための識別フラグ
	;      P1 = 1 が単体制御終了の合図になる
	; v1 : 制御フラグが立っていない場合は制御値に置き換えずにそのまま返すためのもの
	;
#defcfunc local ctlarray_core_ int p1, var v1

	/*****  条件の整理  *****/
	ctl_ary(6) = (ctl_ary(0) == 1) & (ctl_ary(4) == 1) & (p1 == 0) | (ctl_ary(0) == 0) & (ctl_ary(3) == 0)
	ctl_ary(7) = (ctl_ary(0) == 1) & (ctl_ary(4) == 1) & (p1 == 1)
	ctl_ary(8) = (ctl_ary(0) == 0) & (ctl_ary(3) == 1) & (p1 == 1)

	/*****  制御フラグの操作  *****/
	if      ctl_ary(6) {                 return v1} ; 制御されていない or 除外 の場合は何もせずにそのまま返す
	else:if ctl_ary(7) {ctl_ary(4) = 0 : return v1} ; 複数制御+除外指定かつ最後の呼び出しは除外フラグを下ろす
	else:if ctl_ary(8) {ctl_ary(3) = 0            } ; 単体制御の終了合図があれば単体制御のフラグを下ろす

	ctl_ary(9) = ctl_ary(1), (v1 - ctl_ary(1))

	/*****  制御値の置き換え操作  *****/
	if ctl_ary(5) {return limit(limit(ctl_ary(p1 + 1), 0, ctl_ary(p1 + 9)), 0)} else {return 0}


;-----------------------------------------------------------
	; 動作制御終了
	;
#deffunc ctlarray_end
	dim ctl_ary, 11
	return


;-------------------------------------------------------------------------------
	; 配列の情報表示 と その他 雑多な処理
	;
	; ary     : 配列変数
	; vname   : 変数名
	; linenum : 行数
	; coment  : コメント
	;
	; [header_]  :  priarray と labarray の出力文字列の冒頭保管用
	;
#deffunc local ainfo_ var hyouj, array ary, str vname, int linenum, var coment, \
local header_, \
local hoge_

	hogestr = vname : hogestr = strtrim(hogestr, 3,)        ; 半角スペースのトリミング

	dim vtype, 7    : typ_info_@myarray_core ary, vtype     ; 以降の if-else での型分岐用
	dim ary_inf, 7  : dim_info_@myarray_core ary, ary_inf   ; 配列分解処理の下準備

	/*****  出力文字列の冒頭処理  *****/

	; 書式の変更 priarrayはsfrmt(0, 0) labarrayはsfrmt(0, 3)
	if (linenum != -1) {hoge_ = 0} else:if (linenum == -1) {hoge_ = 3}

	gosub jump_(ary_inf(4), 0)    ; (冒頭文字列の記述実行)
	;___________________________________

	/*****  labarray専用処理  *****/
	if (linenum == -1) {
		strrep header_, "\"str\"", "\"label\""
		header_ = strtrim(header_, 2, '1')
		header_ = strtrim(header_, 2, '-')
		header_ += "\n"
	}
	/*****  コメント機能の処理  *****/
	if (coment != "") {header_ += strf(sfrmt(0, 4), coment)}

	hyouj += header_
	return
//-------------------------------  配列情報表示  -------------------------------//

; jump_(0, 0)
*notvarinfo@myarray
	return

; jump_(1, 0)
*D1_aryinfo@myarray
	sdim header_, 1024
	header_ = strf(sfrmt(0, hoge_), hogestr, vtype_names(vartype(ary)), ary_inf.0, linenum)
	return

; jump_(2, 0)
*D2_aryinfo@myarray
	sdim header_, 1024
	header_ = strf(sfrmt(1, hoge_), hogestr, vtype_names(vartype(ary)), ary_inf.0, ary_inf.1, linenum)
	return

; jump_(3, 0)
*D3_aryinfo@myarray
	sdim header_, 1024
	header_ = strf(sfrmt(2, hoge_), hogestr, vtype_names(vartype(ary)), ary_inf.0, ary_inf.1, ary_inf.2, linenum)
	return

; jump_(4, 0)
*D4_aryinfo@myarray
	sdim header_, 1024
	header_ = strf(sfrmt(3, hoge_), hogestr, vtype_names(vartype(ary)), ary_inf.0, ary_inf.1, ary_inf.2, ary_inf.3, linenum)
	return





;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;                   priarray (配列の情報書き出し)
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	; vname   : 変数名 (マクロから)
	; linenum : 行数   (マクロから)
	; --------------------------------------------
	; hyouj   : 配列変数の中身を受け取る文字列型変数
	; ary     : 配列変数
	; coment  : コメント
	;
#deffunc local priarray_dx str vname, int linenum, var hyouj, array ary, var coment

	sdim pri_holder_, 4096

	; 配列情報表示用の内部命令
	ainfo_@myarray hyouj, ary, vname, linenum, coment

	if vtype(6) : goto jump_(0, 0) ; COMオブジェクト型はreturn
	;_______________________________________________________

	dim i, 7
	; ctrarray(動作制御命令)による離脱設定
	i(4)       = ctlarray_core_@myarray(0, i(4))
	ary_inf(5) = ctlarray_core_@myarray(1, ary_inf(5))

	; 書き出し
	repeat ary_inf(5)
		dim_line_num_@myarray_core ary_inf, i, i(4)
		gosub jump_(ary_inf(4), 1)         ; ラベルジャンプで分岐
		i(4)++
	loop

	if vtype(5) & (0 < ary_inf(5)) {
		dupptr PVAL, PVALptrc(ary), 48
		dupptr STRBUF, PVAL(7) - 24, 88
		; STRUCTDAT構造体
		pri_holder_ += strf(sfrmt(0, 5), MInfo(0, sinfo), MInfo(1, sinfo), MInfo(2, sinfo), MInfo(3, sinfo), MInfo(4, sinfo), MInfo(5, sinfo), MInfo(6, sinfo))
		; PVAL構造体
		pri_holder_ += strf(sfrmt(1, 5), PVAL & $FF, PVAL >> 16, PVAL.1, PVAL.2, PVAL.3, PVAL.4, PVAL.5, PVAL.6, PVAL.7, PVAL.7)
		; STRBUF構造体
		pri_holder_ += strf(sfrmt(2, 5), STRBUF & $FF, STRBUF >> 16, STRBUF.1, STRBUF.2, STRBUF.3, STRBUF.3, STRBUF.4, STRBUF.4, STRBUF.5, STRBUF.5)
	}

	hyouj += pri_holder_ + "\n" ; 次の配列変数表示のための改行

	sdim pri_holder_, 4096
	return
//-------------------------------  配列書き出し  -------------------------------//

*not_varpri@myarray
	return

; 1次元配列 jump_(1, 1)
*priarray_1@myarray

	if vtype.0 {hogestr = mlgetc(ary(i.0))}
	else       {hogestr =        ary(i.0) }
	pri_holder_ += strf(sfrmt(0, 1), i.0, hogestr)
	return

; 2次元配列 jump_(2, 1)
*priarray_2@myarray

	if vtype.0 {hogestr = mlgetc(ary(i.0, i.1))}
	else       {hogestr =        ary(i.0, i.1) }
	pri_holder_ += strf(sfrmt(1, 1), i.0, i.1, hogestr)
	return

; 3次元配列 jump_(3, 1)
*priarray_3@myarray

	if vtype.0 {hogestr = mlgetc(ary(i.0, i.1, i.2))}
	else       {hogestr =        ary(i.0, i.1, i.2) }
	pri_holder_ += strf(sfrmt(2, 1), i.0, i.1, i.2, hogestr)
	return

; 4次元配列 jump_(4, 1)
*priarray_4@myarray

	if vtype.0 {hogestr = mlgetc(ary(i.0, i.1, i.2, i.3))}
	else       {hogestr =        ary(i.0, i.1, i.2, i.3) }
	pri_holder_ += strf(sfrmt(3, 1), i.0, i.1, i.2, i.3, hogestr)
	return


;-------------------------------------------------------------------------------
	; 多次元配列書き出しマクロ
	;
	; %1 : 配列変数の中身を受け取る文字列型変数
	; %2 : 配列変数
	; %3 : コメント
	;
#define global priarray(%1,%2,%3="")\
	midlevar_@myarray=%3:\
	priarray_dx@myarray "%2",__line__,%1,%2,midlevar_@myarray





;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;                   setarray (配列の連続代入)
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	; ary     : 代入先の配列変数
	; in_val  : 代入値またはそれを格納した変数
	; iflg    : indexフラグ(= 0, 0:OFF / 1:ON)
	; index   : 増減値
	;
#deffunc local setarray_ array ary, var in_val, int iflg, var index, \
local input_buf_, local index_buf_

	dim vtype, 7   : typ_info_@myarray_core ary, vtype   ; 以降の if-else での型分岐用
	dim ary_inf, 7 : dim_info_@myarray_core ary, ary_inf ; 配列分解処理の下準備

	if (vtype(0) | vtype(6)) : goto jump_(0, 2)
	;_______________________________________________________

	; 代入値が文字列の場合、インデックス付与のために一旦退避
	if (iflg == 1) & vtype(2) : input_buf_ = in_val  :  index_buf_ = index

	dim i, 7
	; ctrarray(動作制御命令)による離脱設定
	i(4)       = ctlarray_core_@myarray(0, i(4))
	ary_inf(5) = ctlarray_core_@myarray(1, ary_inf(5))

	repeat ary_inf(5)
		dim_line_num_@myarray_core ary_inf, i, i(4)
		gosub jump_(ary_inf(4), 2)

		; 文字列に対してインデックスの付与
		if (iflg == 1) & vtype(2) {
			in_val =       input_buf_   ; 足される方を元データに上書き
			in_val += "" + index_buf_   ; インデックスの追加
			index_buf_ +=  index        ; インデックスカウントアップ
		}
		else:if (iflg == 1)  :  in_val += index

		i(4)++
	loop
	return
//---------------------------------  配列代入  ---------------------------------//

*not_varset@myarray
	return

; 1次元配列 jump_(1, 2)
*setarray_1@myarray
	ary(i(0)) = in_val
	return

; 2次元配列 jump_(2, 2)
*setarray_2@myarray
	ary(i(0), i(1)) = in_val
	return

; 3次元配列 jump_(3, 2)
*setarray_3@myarray
	ary(i(0), i(1), i(2)) = in_val
	return

; 4次元配列 jump_(4, 2)
*setarray_4@myarray
	ary(i(0), i(1), i(2), i(3)) = in_val
	return


;-------------------------------------------------------------------------------
	; 多次元配列連続代入マクロ
	;
	; %1 : 代入先の配列変数
	; %2 : 代入したい値
	; %3 : indexフラグ(= 0, 0:OFF / 1:ON)
	; %4 : 増減値
	;
#define global setarray(%1,%2,%3=0,%4=1)\
	midlevar_@myarray=%2:\
	increase_@myarray=%4:\
	setarray_@myarray %1,midlevar_@myarray,%3,increase_@myarray





;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;                   outarray (配列の値書き出し)
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	; hyouj : 配列変数の中身を受け取る文字列型変数
	; ary   : 配列変数
	; iflg  : 機能フラグ (= 0, 0:OFF / 1:ラベルモード)
	;
#deffunc outarray var hyouj, array ary, int iflg, \
local hoge_

	sdim out_holder_, 4096

	dim vtype, 7   : typ_info_@myarray_core ary, vtype   ; 以降の if-else での型分岐用
	dim ary_inf, 7 : dim_info_@myarray_core ary, ary_inf ; 配列分解処理の下準備
	hoge_ = "\n", "\n\treturn\n"

	dim i, 7
	; ctrarray(動作制御命令)による離脱設定
	i(4)       = ctlarray_core_@myarray(0, i(4))
	ary_inf(5) = ctlarray_core_@myarray(1, ary_inf(5))

	; 書き出し
	repeat ary_inf(5)
		dim_line_num_@myarray_core ary_inf, i, i(4)
		gosub jump_(ary_inf(4), 3)
		i(4)++
	loop

	hyouj += out_holder_ + "\n" ; 次の配列変数表示のための改行
	sdim out_holder_, 4096
	return
//-------------------------------  配列書き出し  -------------------------------//

*not_varout@myarray
	return

; 1次元配列 jump_(1, 3)
*outarray_1@myarray
	if vtype(1) {out_holder_ += mlgetc(ary(i.0)) + hoge_.1}
	else        {out_holder_ +=    str(ary(i.0)) + hoge_.iflg}
	return

; 2次元配列 jump_(2, 3)
*outarray_2@myarray
	if vtype(1) {out_holder_ += mlgetc(ary(i.0, i.1)) + hoge_.1}
	else        {out_holder_ +=    str(ary(i.0, i.1)) + hoge_.iflg}
	return

; 3次元配列 jump_(3, 3)
*outarray_3@myarray
	if vtype(1) {out_holder_ += mlgetc(ary(i.0, i.1, i.2)) + hoge_.1}
	else        {out_holder_ +=    str(ary(i.0, i.1, i.2)) + hoge_.iflg}
	return

; 4次元配列 jump_(4, 3)
*outarray_4@myarray
	if vtype(1) {out_holder_ += mlgetc(ary(i.0, i.1, i.2, i.3)) + hoge_.1}
	else        {out_holder_ +=    str(ary(i.0, i.1, i.2, i.3)) + hoge_.iflg}
	return




;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;                   cnvarray (配列へ変換)
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	; ary    : 変数名
	; in_val : 読み込む複数行文字列若しくは多次元配列変数
	; type   : 変換先の型を表す数値 (= 2, 2:文字列型 / 3:実数型 / 4:整数型)
	; d1,d2,d3,d4 : 変換後の各配列次元要素数
	;
#deffunc local cnvarray_ array ary, array in_val, int type, int d1, int d2, int d3, int d4, \
local hoge_

	sdim cnv_holder_, 4096

	typ_info_@myarray_core in_val, vtype
	if (vtype(0) | vtype(6)) : goto jump_(0, 4)

	; 複数行文字列、多次元配列の判別
	if (length(in_val) > 1) {outarray cnv_holder_, in_val, 0} else {cnv_holder_ = in_val}
	notesel cnv_holder_

	; 配列の各次元要素数
	dim ary_inf, 7
	if (d1 == 0) {ary_inf = length(in_val), length2(in_val), length3(in_val), length4(in_val)}
	else         {ary_inf = d1, d2, d3, d4}

	; 配列の初期化 * 型の変換
	if (type == 2) {sdim ary, notesize, ary_inf(0), ary_inf(1), ary_inf(2), ary_inf(3)}
	else           { dimtype ary, type, ary_inf(0), ary_inf(1), ary_inf(2), ary_inf(3)}

	; 次元の使用状況
	ary_inf(4) = (ary_inf(0) != 0) + (ary_inf(1) != 0) + (ary_inf(2) != 0) + (ary_inf(3) != 0)

	; 配列合計数
	ary_inf(5) = 1
	repeat ary_inf(4):   ary_inf(5) *= ary_inf(cnt)   :loop

	dim i, 7
	; 書き出し
	repeat ary_inf(5)
		dim_line_num_@myarray_core ary_inf, i, i(4)
		noteget hogeline, i(5)

		if      (type == 2) {hoge_ =    str(hogeline)}
		else:if (type == 3) {hoge_ = double(hogeline)}
		else:if (type == 4) {hoge_ =    int(hogeline)}

		gosub jump_(ary_inf(4), 4)         ; ラベルジャンプで分岐
		i(4)++ : i(5)++
	loop

	sdim cnv_holder_, 4096
	return
//-------------------------------  配列書き出し  -------------------------------//

*not_varcnv@myarray
	return

; 1次元配列 jump_(1, 4)
*cnvarray_1@myarray
	ary(i(0)) = hoge_
	return

; 2次元配列 jump_(2, 4)
*cnvarray_2@myarray
	ary(i(0), i(1)) = hoge_
	return

; 3次元配列 jump_(3, 4)
*cnvarray_3@myarray
	ary(i(0), i(1), i(2)) = hoge_
	return

; 4次元配列 jump_(4, 4)
*cnvarray_4@myarray
	ary(i(0), i(1), i(2), i(3)) = hoge_
	return


;-------------------------------------------------------------------------------
	; あらゆるものを多次元配列に変換する
	;
	; %1 : 変数名
	; %2 : 読み込む複数行文字列若しくは多次元配列
	; %3 : 変換先の型を表す数値 (= 2, 2:文字列型 / 3:実数型 / 4:整数型)
	; %4,%5,%6,%7 : 変換後の各次元要素
	;
#define global cnvarray(%1,%2,%3=2,%4=0,%5=0,%6=0,%7=0) cnvarray_@myarray %1,%2,%3,%4,%5,%6,%7





;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;                   labarray (ラベル型量産)
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	; hyouj  : 書き出し先の複数行文字列型変数
	; ary    : 書き出す文字列型配列変数
	; in_val : 代入値またはそれを格納した変数
	; index  : 増減値
	;
#deffunc local labarray_ str vname, var hyouj, array ary, var in_val, var index, var coment, \
local input_buf_, \
local index_buf_

	sdim lab_holder_, 4096

	ainfo_@myarray hyouj, ary, vname, -1, coment

	; インデックス付与のために一旦退避
	input_buf_ = in_val
	index_buf_ = index

	dim i, 7
	i(4)       = ctlarray_core_@myarray(0, i(4))
	ary_inf(5) = ctlarray_core_@myarray(1, ary_inf(5))

	repeat ary_inf(5)
		dim_line_num_@myarray_core ary_inf, i, i(4)
		gosub jump_(ary_inf(4), 5)

		; 文字列に対してインデックスの付与
		in_val = input_buf_  :  in_val += "" + index_buf_  :  index_buf_ += index
		i(4)++
	loop

	hyouj += lab_holder_ + "\n" ; 次の配列変数表示のための改行
	sdim lab_holder_, 4096
	return
//---------------------------------  配列代入  ---------------------------------//

*not_varlab@myarray
	return

; 1次元配列 jump_(1, 5)
*labarray_1@myarray
	ary(i(0)) = in_val
	lab_holder_ += strf("\t%s" + sfrmt(0, 1), hogestr, i(0), in_val)
	return

; 2次元配列 jump_(2, 5)
*labarray_2@myarray
	ary(i(0), i(1)) = in_val
	lab_holder_ += strf("\t%s" + sfrmt(1, 1), hogestr, i(0), i(1), in_val)
	return

; 3次元配列 jump_(3, 5)
*labarray_3@myarray
	ary(i(0), i(1), i(2)) = in_val
	lab_holder_ += strf("\t%s" + sfrmt(2, 1), hogestr, i(0), i(1), i(2), in_val)
	return

; 4次元配列 jump_(4, 5)
*labarray_4@myarray
	ary(i(0), i(1), i(2), i(3)) = in_val
	lab_holder_ += strf("\t%s" + sfrmt(3, 1), hogestr, i(0), i(1), i(2), i(3), in_val)
	return


;-------------------------------------------------------------------------------
	; ラベル型多次元配列生成
	;
	; %1 : 書き出し先の複数行文字列型変数
	; %2 : 書き出す文字列型配列変数
	; %3 : 代入値またはそれを格納した変数
	; %4 : 増減値 (= 1)
	; %5 : コメント
	;
#define global labarray(%1,%2,%3,%4=1,%5="")\
	midlevar_@myarray=%3:\
	increase_@myarray=%4:\
	labcoment@myarray=%5:\
	labarray_@myarray "%2",%1,%2,midlevar_@myarray,increase_@myarray,labcoment@myarray





;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;                   calc_ary (配列の四則演算)
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	;	配列演算命令
	;
	;		[array] ans_ary    : 結果を受け取る変数名
	;		[array] ary1       : 変数名
	;		[array] ary2       : 変数名
	;		[ int ] calc_type  : 演算タイプ
	;		[ int ] error_stop : 0除算フラグ (= 0, 0:停止しない / 1:停止する)
	;
	;		[local] ary1_info_ : 配列情報用
	;		[local] ary2_info_ : 配列情報用
	;
#deffunc calc_ary array ans_ary, array ary1, array ary2, int calc_type, int error_stop, \
local ary1_info_, \
local ary2_info_

	; 文字列型の場合に加算以外を指定されたとき計算しない
	if (vartype(ary1) == 2 | vartype(ary2) == 2) & (calc_type != 0) {return -1}
	;___________________________________________________________________________

	; 配列情報の取得
	dim ary1_info_, 7 : dim_info_@myarray_core ary1, ary1_info_
	dim ary2_info_, 7 : dim_info_@myarray_core ary2, ary2_info_

	; 配列演算継続フラグ
	if calc_add_flag == 0 {
		; ans_aryはary1の変数型と各次元要素数で初期化する
		if vartype(ary1) == 2 {sdim ans_ary, 1024, ary1_info_.0, ary1_info_.1, ary1_info_.2, ary1_info_.3}
		else      {dimtype ans_ary, vartype(ary1), ary1_info_.0, ary1_info_.1, ary1_info_.2, ary1_info_.3}
	}

	dimtype ary2_, vartype(ary2)
	; ctrarray(動作制御命令)による離脱設定
	dim i, 7 : i.4 = ctlarray_core_@myarray(0, i.4) : ary1_info_.5 = ctlarray_core_@myarray(1, ary1_info_.5)
	dim j, 7 : j.4 = ctlarray_core_@myarray(0, j.4) : ary2_info_.5 = ctlarray_core_@myarray(1, ary2_info_.5)

	repeat ary1_info_(5)
		dim_line_num_@myarray_core ary1_info_, i, i(4) ; 右辺の左側 (〜される数)
		dim_line_num_@myarray_core ary2_info_, j, j(4) ; 右辺の右側 (〜する数)

		i(5) = 1 : gosub jump_(ary2_info_(4), 6)  ; ary2の代入
		i(5) = 0 : gosub jump_(ary1_info_(4), 6)  ; 配列演算 (ans_aryの代入)

		i(4)++ : j(4)++
	loop

	dim calc_add_flag ; 演算継続フラグを下ろす
	return
//-------------------------------  配列書き出し  -------------------------------//

*not_varcal@myarray
	return

; 1次元配列 jump_(1, 6)
*calc_ary_1@myarray
	if i.5 {ary2_ = ary2(j.0)}
	else   {ans_ary(i.0) = cpu_ary_@myarray(ary1(i.0), ary2_, calc_type, error_stop)}

	return

; 2次元配列 jump_(2, 6)
*calc_ary_2@myarray
	if i.5 {ary2_ = ary2(j.0, j.1)}
	else   {ans_ary(i.0, i.1) = cpu_ary_@myarray(ary1(i.0, i.1), ary2_, calc_type, error_stop)}

	return

; 3次元配列 jump_(3, 6)
*calc_ary_3@myarray
	if i.5 {ary2_ = ary2(j.0, j.1, j.2)}
	else   {ans_ary(i.0, i.1, i.2) = cpu_ary_@myarray(ary1(i.0, i.1, i.2), ary2_, calc_type, error_stop)}

	return

; 4次元配列 jump_(4, 6)
*calc_ary_4@myarray
	if i.5 {ary2_ = ary2(j.0, j.1, j.2, j.3)}
	else   {ans_ary(i.0, i.1, i.2, i.3) = cpu_ary_@myarray(ary1(i.0, i.1, i.2, i.3), ary2_, calc_type, error_stop)}

	return


;-------------------------------------------------------------------------------
	; 配列演算継続命令
	;
#deffunc calc_continue
	dim calc_add_flag : calc_add_flag = 1
	return


;-------------------------------------------------------------------------------
	; 配列演算関数 (分岐用)  (由来 : calculation processing unit array)
	;
	; v1, v2     : ary1, ary2
	; calc_type  : 演算タイプ
	; error_stop : 0で除算エラー (= 0, 0:停止しない / 1:停止する)
	;
	; *** calc_chk_ 条件式 解説 ***
	;	((calc_type == 3) | (calc_type == 4)) & (v2 == 0)
	;	(演算タイプが "除算" または "剰余") かつ (v2の値が0)
	;	"0で除算エラー" が発生する条件
	;
	;	(error_stop == 0)
	;	エラーを発生させないよう、
	;	計算せずに異常値(テキトーな値)を返してエラーを回避する
	;
#defcfunc local cpu_ary_ var v1, var v2, int calc_type, int error_stop

	calc_chk_ = ((calc_type == 3) | (calc_type == 4)) & (v2 == 0) & (error_stop == 0)

	if      calc_chk_ & (vartype(v1) == 4) {return -2147483648 } ; テキトーな値
	else:if calc_chk_ & (vartype(v1) == 3) {return -214748364.8}

	; cpu_jumpの定義は _myarray_init_内 (210行あたり) にあります。
	goto cpu_jump(calc_type) ; ラベルジャンプで分岐

	return
//----------------------------------------------------------------------------//

;         ↓この番号がcalc_typeの値と一致します
*calc_typ_0@myarray : return (v1 + v2)  ; 加算
*calc_typ_1@myarray : return (v1 - v2)  ; 減算
*calc_typ_2@myarray : return (v1 * v2)  ; 乗算
*calc_typ_3@myarray : return (v1 / v2)  ; 除算
*calc_typ_4@myarray : return (v1 \ v2)  ; 剰余
*calc_typ_5@myarray : return (v1 + v1 * v2)        ; 割増 (実数指定)
*calc_typ_6@myarray : return (v1 - v1 * v2)        ; 割引 (実数指定)
*calc_typ_7@myarray : return (v1 + v1 * v2 * 0.01) ; 割増 (%)
*calc_typ_8@myarray : return (v1 - v1 * v2 * 0.01) ; 割引 (%)

	; こちら以降にどんどん計算式を追加することでカスタムすることができます。
*calc_typ_9@myarray : return
*calc_typ_10@myarray : return
*calc_typ_11@myarray : return
*calc_typ_12@myarray : return
*calc_typ_13@myarray : return
*calc_typ_14@myarray : return

	; このラベルの書き方の方が、if-else:ifで分岐するより
	; 処理速度的にも比較がない分速いでしょうし、
	; 行数も対して変わらないかと思います。


#global // myarray

	// それぞれモジュール内の管理用変数の初期化です //
	_mytool_init_@mytool   ; デバッグ支援、小物類
	_myarray_init_@myarray ; 提供機能、ユーザー利用部

#endif //__myarray__