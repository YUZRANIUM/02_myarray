// INFO ************************************************************************
// FileName : 02_myarray.hsp
// Version  : 0.26.1
// Date     : 2022/12/20
// Author   : YUZRANIUM（ゆずらにうむ）
// Twitter  : https://twitter.com/YUZRANIUM
// GitHub   : https://github.com/YUZRANIUM/02_myarray
// *****************************************************************************
/* Description
 多次元配列をなんやかんやするモジュールです。おまけ付きです

	このモジュールはHSPTV!掲示板の皆様によって支えられております。
	この場を借りて感謝申し上げます。誠に有難うございます。

	***  掲示板情報  ***
	kind    : 宣伝
	date    : 2022/11/26
	person  : Yuzranium
	content : 多次元配列変数を複数行文字列に
********************************************************************************/




/////////////////////////////  ちょびっとつーるず  //////////////////////////////
#ifndef __my_tools__
#define global __my_tools__
#module "mytool"


// sortgetの関数バージョン
//
// p1 : index No.
#defcfunc sortgetc int p1
	sortget res, p1
	return res

/*--------------------------------------------------------*/
// 一方の配列のソートに合わせて他方もソート
//
// ary1 : 主配列(メイン)
// ary2 : 副配列(ary1に合わせてソートする配列)
// p1   : 昇降順
#deffunc twinsortary array ary1, array ary2, int p1
	dimtype tmp, vartype(ary2), length(ary2)

	foreach ary2
		tmp(cnt) = ary2(cnt)
	loop

	if      (vartype(ary1) == 4) {sortval ary1, p1}
	else:if (vartype(ary1) == 2) {sortstr ary1, p1}
	foreach ary2
		ary2(cnt) = tmp(sortgetc(cnt))
	loop

	return

	; 二分木探索関数
	;
	; item_      : 探す値
	; srch_data : 探す場所（配列変数）
	;
#deffunc bisrch var item_, array srch_data, array srch
	dim srch, 3
	srch(0) = 0                        ; midle
	srch(1) = 0                        ; low
	srch(2) = length(srch_data) - 1    ; high
	repeat
		srch(0) = (srch(1) + srch(2)) / 2
		if      ((srch(1) <= srch(2)) != 1) {srch.0 = -1 : break}
		else:if (item_ = srch_data(srch.0)) {break}
		else:if (item_ < srch_data(srch.0)) {srch.2 = srch.0 - 1}
		else                                {srch.1 = srch.0 + 1}
	loop

	return

/*--------------------------------------------------------*/
// objprm のハンドル指定版(内部命令)
//
// objhwnd_     : オブジェクトハンドル
// -------------
// obj_prmdata_ : 表示する値(マクロから)
#deffunc local objprh_ int objhwnd_, var obj_prmdata_
	sendmsg objhwnd_, $C, 0, obj_prmdata_
	return
	;
	; メリット
	;  * gsel で描画先･操作先の管理をしなくて良い
	;    複数のウィンドウで複数のオブジェクトを扱う場合に効果を発揮します
	; objprm と同じことができる...はず(layerobjだけ確認していません)

/*--------------------------------------------------------*/
// objprm のハンドル指定版
//
// p1 : オブジェクトハンドル
// p2 : 変数(値の直接指定でも可)
#define global objprh(%1,%2)\
	midlevar_@mytool=%2:\
	objprh_@mytool %1,midlevar_@mytool

/*============================================================================*/
// 変数名と行数表示
//
// p1      : 表示させたい値
// ---------
// vname   : 変数名 (マクロから)
// linenum : 行  数 (マクロから)
#deffunc local logpri_ var p1, str vname, int lineunm
	logmes "" + strf("/*** %d ***/\n%s = %s\n", lineunm, vname, p1)
	return
	;
	; 変数名の表示と言うかp1に指定したものが表示されます。
	; ※致命的な欠陥※ ダブルクオーテーション(")が使えない

/*--------------------------------------------------------*/
// 変数名と行数表示
//
// p1 : 表示させたい値
#define global logpri(%1)\
	midlevar_@mytool=%1:\
	logpri_@mytool midlevar_@mytool,"%1",__line__

#global // mytool
#endif  //__my_tools__
/////////////////////////  ちょびっとつーるず ここまで  //////////////////////////







///////////////////////////  本体は ここから [EOF]まで  /////////////////////////

#ifndef __myarray__
#define global __myarray__

#module "myarray"

#const STRUCTDAT_SIZE 28

// 内部変数の初期化
	; 呼び出しの多い関数側で、下の管理用変数を置いておくと関数が呼び出されるたびに
	; 管理用変数も初期化して代入、を繰り返すことになるので切り離してみました
	; また、このファイルの最下部で使用しておりますので特別、呼び出す必要はありません
	;
#deffunc local _myarray_init_
	; 分岐用ラベル
	; *未対応の型, *1次元, *2次元, *3次元, *4次元
	;
	ldim jump_@myarray, 5, 6
		; (0, 0) 配列情報表示    * 使用箇所: ainfo_
		; (0, 1) 配列書き出し    * 使用箇所: priarray_dx
		; (0, 2) 配列連続代入    * 使用箇所: setarray_
		; (0, 3) 配列生値出力    * 使用箇所: outarray_
		; (0, 4) 配列生値読込    * 使用箇所: cnvarray_
		; (0, 5) ラベル型配列    * 使用箇所: labarray_
	jump_@myarray(0, 0) = *notvarinfo@myarray, *D1_aryinfo@myarray, *D2_aryinfo@myarray, *D3_aryinfo@myarray, *D4_aryinfo@myarray
	jump_@myarray(0, 1) = *not_varpri@myarray, *priarray_1@myarray, *priarray_2@myarray, *priarray_3@myarray, *priarray_4@myarray
	jump_@myarray(0, 2) = *not_varset@myarray, *setarray_1@myarray, *setarray_2@myarray, *setarray_3@myarray, *setarray_4@myarray
	jump_@myarray(0, 3) = *not_varout@myarray, *outarray_1@myarray, *outarray_2@myarray, *outarray_3@myarray, *outarray_4@myarray
	jump_@myarray(0, 4) = *not_varcnv@myarray, *cnvarray_1@myarray, *cnvarray_2@myarray, *cnvarray_3@myarray, *cnvarray_4@myarray
	jump_@myarray(0, 5) = *not_varlab@myarray, *labarray_1@myarray, *labarray_2@myarray, *labarray_3@myarray, *labarray_4@myarray

	; ##########################################################################
	; *** 変数の型名表示 ***
	; * 変数の型名を変更する場合はこちらを編集して下さい
	; ※配列で管理しているのでvartypeで取得する数値と要素数を一致させる必要があります
	; 例）tinfo_(vartype(ary))
	;
	; * 使用箇所: 配列の情報表示 ainfo_    分岐ラベル *D1_aryinfo 〜 *D4_aryinfo
	; --------------------------------------------------------------------------
	;
	sdim tinfo_@myarray, 64, 7
	tinfo_@myarray = "", "label", "str", "double", "int", "struct", "comobj"

	; ##########################################################################
	; *以降の命令・関数内で使用するstrf関数の書式指定文字列は下の変数で管理しています
	; *書式の変更を行いたい場合はこちらを編集して下さい
	; --------------------------------------------------------------------------
	;
	sdim srfor@myarray, 512, 4, 5

		; ==========================================================================
		; *** 配列の情報表示 ***
		; [ 変数名 ] 型名(1次元要素, 2次元要素, 3次元要素, 4次元要素) L=行数
		; 例）[ ary ] str(5, 4, 3, 2) L=85
		;
		; * 使用箇所: 配列の情報表示 ainfo_   分岐ラベル *D1_aryinfo 〜 *D4_aryinfo
		; --------------------------------------------------------------------------
		;
	srfor@myarray(0, 0) = "[ %s ] %s(%d) L=%d\n"
	srfor@myarray(1, 0) = "[ %s ] %s(%d, %d) L=%d\n"
	srfor@myarray(2, 0) = "[ %s ] %s(%d, %d, %d) L=%d\n"
	srfor@myarray(3, 0) = "[ %s ] %s(%d, %d, %d, %d) L=%d\n"

		; ==========================================================================
		; *** 配列の書き出し ***
		; (1次元要素, 2次元要素, 3次元要素, 4次元要素) = 実際の数値
		; 例）(0, 0, 0, 0) = ABCDE
		; 例）(0, 0, 0, 0) = 12345
		;
		; * 使用箇所: 配列書き出し priarray_dx   分岐ラベル *priarray_1 〜 *priarray_4
		; --------------------------------------------------------------------------
		;
	srfor@myarray(0, 1) = "(%d) = %s\n"
	srfor@myarray(1, 1) = "(%d, %d) = %s\n"
	srfor@myarray(2, 1) = "(%d, %d, %d) = %s\n"
	srfor@myarray(3, 1) = "(%d, %d, %d, %d) = %s\n"


		; ==========================================================================
		; *** 配列の書き出し未対応の型(モジュール型、COMオブジェクト型) ***
		; (1次元要素, 2次元要素, 3次元要素, 4次元要素): varuse [(0x)varptr]
		; 例）(0, 0, 0, 0): 0 [0x12345]
		; 例）(0, 0, 0, 0): 1 [0xabcde]
		;
		; * 使用箇所: 配列書き出し priarray_dx   分岐ラベル *priarray_1 〜 *priarray_4
		; --------------------------------------------------------------------------
		;
	srfor@myarray(0, 2) = "(%d): %d [0x%x]\n"
	srfor@myarray(1, 2) = "(%d, %d): %d [0x%x]\n"
	srfor@myarray(2, 2) = "(%d, %d, %d): %d [0x%x]\n"
	srfor@myarray(3, 2) = "(%d, %d, %d, %d): %d [0x%x]\n"


		; ==========================================================================
		; *** 配列の情報表示 labarray仕様 *** 行数ダミーの%d
		; dimtype 変数名, 1, 1次元要素, 2次元要素, 3次元要素, 4次元要素
		; 例）dimtype ary, 1, 5, 4, 3, 2
		;
		; * 使用箇所: 配列の情報表示 ainfo_   分岐ラベル *D1_aryinfo 〜 *D4_aryinfo
		; --------------------------------------------------------------------------
		;
	srfor@myarray(0, 3) = "\tdimtype %s, vartype(\"%s\"), %d %d"
	srfor@myarray(1, 3) = "\tdimtype %s, vartype(\"%s\"), %d, %d %d"
	srfor@myarray(2, 3) = "\tdimtype %s, vartype(\"%s\"), %d, %d, %d %d"
	srfor@myarray(3, 3) = "\tdimtype %s, vartype(\"%s\"), %d, %d, %d, %d %d"


		; ==========================================================================
		; *** コメント & エラーレポート機能 ***
		; ((  配列情報  ))
		; /*------------------------------
		; 何かしらのコメント
		; <エラーレポートメッセージ>
		; ->name:[ 変数名 ] line:行数
		; ->name:[ 変数名 ] line:行数
		;             :
		; ------------------------------*/
		; ((  値一覧  ))
		;
		; * 使用箇所: 配列書き出し priarray_dx
		; * 使用箇所: 配列連続代入 setarray_   分岐ラベル *not_varset (エラーレポートの発行場所)
		; --------------------------------------------------------------------------
		;
	srfor@myarray(0, 4) = "/*------------------------------\n%s\n------------------------------*/\n"

		;  エラーレポートメッセージ
	reportmes_@myarray = "\nyou tried to enter a value into unsupported variable types"

		;  エラーレポートの書式
	srfor@myarray(1, 4) = "\n->name:[ %s ] line:%d"

/*============================================================================*/
	/*****  以下、特にここに置く必要もないのですが私的な理由で置いています  *****/

	; dim alldim_@myarray, 4      ; 各配列要素数の格納用
	; dim i@myarray, 7            ; 各次元配列の要素
	; sum_@myarray = 0            ; 各次元の使用状況と各次元要素数を乗算して総合計したもの (= 配列の総数)
	; type_ch@myarray = 0         ; 以降の if〜else での未対応の型分岐用判別式
	; prinfo_@myarray = 0         ; 各次元の使用状況 ( length(p2) != 0 ) などとして 0, 1 で確保しているか否かを判別

	; midlevar_@myarray = ""      ; 複数の変数型に対応するため代入値用媒介変数 (マクロで使用)
	; increase_@myarray = ""      ; setarrayにて、増減値用の媒介変数. double, intに対応 (マクロで使用)

	; strbuf_@myarray = ""        ; setarrayにて、インデックス付与のための文字列バッファー
	; indexbuf_@myarray = ""      ; setarrayにて、文字列型へのインデックス付与のための増減値バッファー
	; error_report_@myarray = ""  ; setarrayにて、未サポートの型への代入を試みた際に表示するエラーレポート (表示自体は直後のpriarray)
	return


// ラベル名･モジュール名文字列取得内部関数
//
// p1 : バッファのインデックス
#defcfunc local namegetc int p1
	getstr res, DS, p1
	return res

#defcfunc local ofstgetc int p1
	return hspctx(2) + OT(p1) * 2


//----------------------------------------------------------
// ラベル名取得用
//----------------------------------------------------------

	; 構造体の詳細はhspsdkフォルダのhsp3code.txt,hspdll.txtを参考
	; ※言語仕様としての注意※
	; 1) リリース時にはデバック情報はobj(ax)ファイルに書き込まれない(#cmpopt varname 1は使えない？)
	; 2) 隣接するラベルはまとまる(ジャンプ先が同一になるので判定不能)
	; 3) 小文字になる
	; ※hsp3_64未対応※
#deffunc local _load_hsphed_
	mref hspctx, 68                     ; HSPのシステム情報(HSPCTX構造体)
	dupptr hsphed, hspctx(0), 96        ; AXヘッダ情報の詳細(HSPHED構造体)
	dupptr DS, hspctx(3), hsphed(7), 2  ; DS
	dupptr OT, hspctx(5), hsphed(9), 4  ; OT
	dupptr DI, hspctx(4), hsphed(11), 2 ; DI
	dupptr FI, hspctx(210), hsphed(15)

	sdim lab_names, 2048    ; ラベル名のリスト用
	sdim mod_names, 2048
	dim lab_ofset           ; ラベル名に対応するアドレスポインタ用
	; dim mod_ofset
	dim i, 7

	/*****  ラベルリストの取得  *****/
	repeat
		if      (peek(DI, i) == 252) {i += 3 : continue}
		else:if (peek(DI, i) == 253) {i += 6 : continue}
		else:if (peek(DI, i) == 254) {i += 6 : continue}
		else:if (peek(DI, i) == 255) {i++    : break}
		else                         {i++    : continue}
	loop

	repeat , i
		if peek(DI, cnt) = 255 : break
		lab_names(i.2) = namegetc@myarray(lpeek(DI, cnt + 1) & $00FFFFFF)
		lab_ofset(i.2) = ofstgetc@myarray(wpeek(DI, cnt + 4))
		i(2)++
		continue cnt + 6
	loop

	/***  二分木探索用ソート  ***/
	twinsortary lab_ofset, lab_names, 0

	/*****  モジュール･関数関連  *****/
		; ----------------------------------------------------------------------
		; m_index(i.0)     = SD & $FF  ; base LIBDAT index
		; m_subid(i.0)     = SD >> 16  ; struct index
		; m_primindex(i.0) = SD.1      ; STRUCTPRM index(MINFO)
		; m_prmmax(i.0)    = SD.2      ; number of STRUCTPRM
		; m_nameidx(i.0)   = SD.3      ; name index (DS)
		; m_size(i.0)      = SD.4      ; struct size (stack)
		; m_otindex(i.0)   = SD.5      ; OT index(Module) / cleanup flag(Dll)
		; ----------------------------------------------------------------------
	dim i, 7
	repeat hsphed(15) / STRUCTDAT_SIZE
		; ptr = varptr(FI) + cnt * STRUCTDAT_SIZE
		; dupptr SD, ptr, STRUCTDAT_SIZE
		dupptr SD, varptr(FI) + cnt * STRUCTDAT_SIZE, STRUCTDAT_SIZE
		if ((SD.1 < 0) | (SD.5 != 0)) : continue
		m_primindex(i) = SD.1         ; STRUCTPRM index(MINFO)
		mod_info_list(i * 7) = SD & $FF, SD >> 16, SD.1, SD.2, SD.3, SD.4, SD.5
		mod_names(i) = namegetc@myarray(mod_info_list(i * 7 + 4))
		i++
	loop

	return


	;-----------------------------------
	; ラベル名取得内部関数
	;-----------------------------------
// modlab_var  : ラベル型変数
#defcfunc modlabget var modlab_var
	if vartype(modlab_var) == 1 {
		dupptr clone, varptr(modlab_var), 4
		bisrch clone, lab_ofset, sinfo

		if (sinfo != -1) {return "*" + lab_names(sinfo)}
		else             {return "<null-label>"}
	}
	else:if vartype(modlab_var) == 5 {
		dupptr clone, varptr(modlab_var), 16
		bisrch clone.1, m_primindex, sinfo

		if (sinfo != -1) {return "" + mod_names(sinfo)}
		else             {return "[not-found]"}
	}


//----------------------------------------------------------
//配列の情報表示とその他雑多な処理
//----------------------------------------------------------

// ary     : 配列変数
// vname   : 変数名
// linenum : 行数
// coment  : コメント
#deffunc local ainfo_ var hyouj, array ary, str vname, int linenum, var coment, int cl

	; 半角スペースのトリミング
	hogestr = vname  :  hogestr = strtrim(hogestr, 3,)

	/***  以降の if〜else での未対応の型分岐用  ***/
	; 未対応型 (ラベル型、モジュール型、COMオブジェクト型)
	type_ch(0) = (vartype(ary) == 1) | (vartype(ary) == 5)
	type_ch(1) = (vartype(ary) == 1)    ; label
	type_ch(2) = (vartype(ary) == 2)    ; str
	type_ch(3) = (vartype(ary) == 3)    ; double
	type_ch(4) = (vartype(ary) == 4)    ; int
	type_ch(5) = (vartype(ary) == 5)    ; struct
	type_ch(6) = (vartype(ary) == 6)    ; comobj


	; 各次元要素の保持
	alldim_ = length(ary), length2(ary), length3(ary), length4(ary)
	; 使用次元の確認
	prinfo_ = (alldim_(0) != 0) + (alldim_(1) != 0) + (alldim_(2) != 0) + (alldim_(3) != 0)
	; setarray, outarrayから呼び出された場合はここで return
	if cl == -1 : goto jump_(0, 0)

	/***  書式の変更  ***/
	; priarray から呼び出される場合はsrfor(0, 0) labarray から呼び出される場合はsrfor(0, 3)
	if cl == 0 : hoge = 0  : else:if cl == -2 : hoge = 3


	; ラベルジャンプで分岐
	gosub jump_(prinfo_, 0)//-------------------------------------------------//

	; 書式の変更は終えたので初期化してOK
	hoge = 0

	; --------------------------------------------------------------------------
	; labarrayで出力される複数行文字列の先頭部分は配列情報ではなく、dimtypeでの
	; 変数初期化を記述する必要がある。(多次元配列のための処理)
	; --------------------------------------------------------------------------
	;
	if (cl == -2) {
		hyouj = strtrim(hyouj, 2, '0')
		hyouj = strtrim(hyouj, 2,)
		strrep hyouj, "(\"str\")", "(\"label\")"
		hyouj += "\n"
	}

	; hoge(0) = コメントのみの場合, hoge(1) = コメント、エラーレポートの両方がある場合
	hoge = ((coment != "") & (error_report_ == "")), ((coment != "") | (error_report_ != ""))

	; エラーレポートを使用しない場合はelse以降をコメントアウトして下さい
	if      hoge(0) {hyouj += strf(srfor(0, 4), coment)}
	else:if hoge(1) {hyouj += strf(srfor(0, 4), coment + reportmes_ + error_report_) : error_report_ = ""}

	return

//-------------------------------  配列情報表示  -------------------------------//
	; [ 変数名 ] 型(1次元要素, 2次元要素, 3次元要素, 4次元要素) L=行数

; jump_(0, 0)
*notvarinfo@myarray
	return

; jump_(1, 0)
*D1_aryinfo@myarray
	hyouj += strf(srfor(0, hoge), hogestr, tinfo_(vartype(ary)), length(ary), linenum)
	return

; jump_(2, 0)
*D2_aryinfo@myarray
	hyouj += strf(srfor(1, hoge), hogestr, tinfo_(vartype(ary)), length(ary), length2(ary), linenum)
	return

; jump_(3, 0)
*D3_aryinfo@myarray
	hyouj += strf(srfor(2, hoge), hogestr, tinfo_(vartype(ary)), length(ary), length2(ary), length3(ary), linenum)
	return

; jump_(4, 0)
*D4_aryinfo@myarray
	hyouj += strf(srfor(3, hoge), hogestr, tinfo_(vartype(ary)), length(ary), length2(ary), length3(ary), length4(ary), linenum)
	return


// d1,d2 : 情報表示、連続代入、書き出し動作の開始次元
#deffunc ctrarray int d1, int d2
	dim ctr_ary, 6
	ctr_ary(0) = d1, d2     ; 各命令の動作開始

	ctr_ary(2) = 0          ; 制御ID == 動作ID
	ctr_ary(3) = ((0 <= d1) & (0 <= d2) & (d1 <= d2))
	ctr_ary(4)++            ; 制御ID (自分(ctrarray_)が呼び出された回数)
	ctr_ary(5) = 0          ; 動作ID (制御される側の命令が呼び出された回数)
	return




//----------------------------------------------------------
//配列の書き出し内部命令
//----------------------------------------------------------

// n次元配列の書き出し
//
// vname   : 変数名 (マクロから)
// linenum : 行数   (マクロから)
//---------
// hyouj   : 配列変数の中身を受け取る文字列型変数
// ary     : 配列変数
// coment  : コメント
#deffunc local priarray_dx str vname, int linenum, var hyouj, array ary, var coment
	dim i, 7

	; 配列情報表示用の内部命令
	ainfo_@myarray hyouj, ary, vname, linenum, coment, 0

	; COMオブジェクト型は実行せずにreturn
	if type_ch(6) : goto jump_(0, 0)

	; 配列数合計
	sum_ = 1
	repeat 4
		if (alldim_(cnt) == 0)  :  break
		sum_ *= alldim_(cnt)
	loop

	; 動作ID : 制御IDと動作IDが一致しているか
	ctr_ary(5)++ : ctr_ary(2) = (ctr_ary(4) == ctr_ary(5))

	; ctrarray(動作制御命令)による離脱設定
	if (ctr_ary(2) & ctr_ary(3)) {i(4) = ctr_ary(0) : sum_ = (ctr_ary(1) - i(4))}

	; 書き出し
	repeat sum_
		repeat prinfo_
			num_ = i(4)
			repeat cnt
				num_ /= alldim_(cnt)
			loop
			i(cnt) = num_ \ alldim_(cnt)
		loop
		gosub jump_(prinfo_, 1)      ; ラベルジャンプで分岐
		i(4)++
	loop

	hyouj += "\n"      ; 次の配列変数表示のための改行
	return

//-------------------------------  配列書き出し  -------------------------------//

	; 丸括弧が重なりすぎて非常に読みにくくなってしまったので、
	; このあたりだけ配列を旧書式としています。

; 未対応の型はこちらへ jump_(0, 1)
*not_varpri@myarray
	return

; 1次元配列 jump_(1, 1)
*priarray_1@myarray
	if (type_ch.0) {hyouj += strf(srfor(0, 1), i.0, modlabget(ary(i.0)))}
	else:           hyouj += strf(srfor(0, 1), i.0, ary(i.0))
	return

; 2次元配列 jump_(2, 1)
*priarray_2@myarray
	if (type_ch.0) {hyouj += strf(srfor(1, 1), i.0, i.1, modlabget(ary(i.0, i.1)))}
	else:           hyouj += strf(srfor(1, 1), i.0, i.1, ary(i.0, i.1))
	return

; 3次元配列 jump_(3, 1)
*priarray_3@myarray
	if (type_ch.0) {hyouj += strf(srfor(2, 1), i.0, i.1, i.2, modlabget(ary(i.0, i.1, i.2)))}
	else:           hyouj += strf(srfor(2, 1), i.0, i.1, i.2, ary(i.0, i.1, i.2))
	return

; 4次元配列 jump_(4, 1)
*priarray_4@myarray
	if (type_ch.0) {hyouj += strf(srfor(3, 1), i.0, i.1, i.2, i.3, modlabget(ary(i.0, i.1, i.2, i.3)))}
	else:           hyouj += strf(srfor(3, 1), i.0, i.1, i.2, i.3, ary(i.0, i.1, i.2, i.3))
	return




//----------------------------------------------------------
// 配列連続代入内部命令
//----------------------------------------------------------

// 配列連続代入内部命令
//
// ary     : 代入先の配列変数
// in_val  : 代入値またはそれを格納した変数
// iflg    : indexフラグ(=0)(0 : OFF, 1 : ON)
// index   : 増減値 (str, double, int)
//---------
// vname   : 変数名（マクロから）
// linenum : 行数（マクロから）
#deffunc local setarray_ str vname, int linenum, array ary, var in_val, int iflg, var index
	dim i, 7
	strbuf_ = ""  :  indexbuf_ = ""   ; ダミー
	ainfo_@myarray strbuf_, ary, vname, linenum, indexbuf_, -1

// (  (フラグ = 1) かつ (未対応型)  ) または ( モジュール型 ) または ( COMオブジェクト型 ) //
	if ((iflg == 1) & (type_ch.0 | type_ch.6)) | type_ch(5) | type_ch(6) : goto jump_(0, 2)

	; 代入値が文字列の場合、インデックス付与のために一旦退避
	if (iflg == 1) & (type_ch(2))  :  strbuf_ = in_val  :  indexbuf_ = index

	; 配列数合計
	sum_ = 1
	repeat 4
		if (alldim_(cnt) == 0)  :  break
		sum_ *= alldim_(cnt)
	loop

	repeat sum_
		i(4) = cnt
		repeat prinfo_
			num_ = i(4)
			repeat cnt
				num_ /= alldim_(cnt)
			loop
			i(cnt) = num_ \ alldim_(cnt)
		loop

		gosub jump_(prinfo_, 2)    ; ラベルジャンプで分岐

		; 文字列に対してインデックスの付与
		if (iflg == 1) & (type_ch(2)) {
			in_val = strbuf_            ; 足される方を元データに上書き
			in_val += "" + indexbuf_    ; インデックスの追加
			indexbuf_ += index          ; インデックスカウントアップ
		}
		else:if (iflg == 1)  :  in_val += index

	loop

	return

//---------------------------------  配列代入  ---------------------------------//

; 未対応の型はこちらへ jump_(0, 2)
*not_varset@myarray
/////////////////////////////  エラーレポートの発行  /////////////////////////////
	error_report_ += strf(srfor(1, 4), hogestr, linenum)
	return

; 1次元配列 jump_(1, 2)
*setarray_1@myarray
	ary(i(0)) = in_val
	return

; 2次元配列 jump_(2, 2)
*setarray_2@myarray
	ary(i(0), i(1)) = in_val
	return

; 3次元配列 jump_(3, 2)
*setarray_3@myarray
	ary(i(0), i(1), i(2)) = in_val
	return

; 4次元配列 jump_(4, 2)
*setarray_4@myarray
	ary(i(0), i(1), i(2), i(3)) = in_val
	return





//----------------------------------------------------------
//配列の生値出力
//----------------------------------------------------------

// n次元配列の生値出力
//
// hyouj : 配列変数の中身を受け取る文字列型変数
// ary   : 配列変数
// iflg  : ラベルモードフラグ (= 0)
#deffunc local outarray_ var hyouj, array ary, int iflg
	dim i, 7
	hoge = ""    ; ダミー
	ainfo_@myarray hyouj, ary, "", 0, hoge, -1
	hoge = "\n", "\n\treturn\n"

	; 配列数合計
	sum_ = 1
	repeat 4
		if (alldim_(cnt) == 0)  :  break
		sum_ *= alldim_(cnt)
	loop

	; 書き出し
	repeat sum_
		i(4) = cnt
		repeat prinfo_
			num_ = i(4)
			repeat cnt
				num_ /= alldim_(cnt)
			loop
			i(cnt) = num_ \ alldim_(cnt)
		loop
		gosub jump_(prinfo_, 3)      ; ラベルジャンプで分岐
	loop

	; 空行ができてしまうので一時的にコメントアウト
	// hyouj += "\n"      ; 次の配列変数表示のための改行
	return

//-------------------------------  配列書き出し  -------------------------------//

*not_varout@myarray
	return

; 1次元配列 jump_(1, 3)
*outarray_1@myarray
	if type_ch(1) {hyouj += "" + modlabget(ary(i.0)) + hoge.1}
	else          {hyouj += "" + ary(i.0) + hoge.iflg}
	return

; 2次元配列 jump_(2, 3)
*outarray_2@myarray
	if type_ch(1) {hyouj += "" + modlabget(ary(i.0, i.1)) + hoge.1}
	else          {hyouj += "" + ary(i.0, i.1) + hoge.iflg}
	return

; 3次元配列 jump_(3, 3)
*outarray_3@myarray
	if type_ch(1) {hyouj += "" + modlabget(ary(i.0, i.1, i.2)) + hoge.1}
	else          {hyouj += "" + ary(i.0, i.1, i.2) + hoge.iflg}
	return

; 4次元配列 jump_(4, 3)
*outarray_4@myarray
	if type_ch(1) {hyouj += "" + modlabget(ary(i.0, i.1, i.2, i.3)) + hoge.1}
	else          {hyouj += "" + ary(i.0, i.1, i.2, i.3) + hoge.iflg}
	return




//----------------------------------------------------------
// あらゆるものを多次元配列に変換する内部命令
//----------------------------------------------------------

// あらゆるものを多次元配列に変換する
//
// ary    : 変数名
// in_val : 読み込む複数行文字列若しくは多次元配列変数
// type   : 変換先の型を表す数値  (= 2) (2:文字列型, 3:実数型, 4:整数型)
// d1     : 第1次元要素数 (= 0)
// d2     : 第2次元要素数 (= 0)
// d3     : 第3次元要素数 (= 0)
// d4     : 第4次元要素数 (= 0)
#deffunc local cnvarray_ array ary, array in_val, int type, int d1, int d2, int d3, int d4
	dim i, 7  :  sdim hogestr, 1024

	; 複数行文字列、多次元配列の判別
	; 要素数が2以上あれば多次元配列とみなしてoutarrayにて複数行文字列化
	;		今のところ、私の思いついた最善手です
	;		これがないと配列同士の次元を超えた変換ができない
	;
	if (length(in_val) > 1) {outarray_@myarray hogestr, in_val, 0}
	else                    {hogestr = in_val}

	notesel hogestr

	; 配列の各次元要素数
	; p1が0の場合はもととなる配列の次元要素数をそのまま使う
	;		(配列の全コピーとしても機能させるため)
	;
	if (d1 == 0) {alldim_ = length(in_val), length2(in_val), length3(in_val), length4(in_val)}
	else:         alldim_ = d1, d2, d3, d4

	; 配列の初期化 * 型の変換
	;		数値型（実数型、整数型）はdimtypeでまとめてます
	;
	if (type == 2) {sdim ary, notesize, alldim_(0), alldim_(1), alldim_(2), alldim_(3)}
	else:            dimtype ary, type, alldim_(0), alldim_(1), alldim_(2), alldim_(3)

	; 次元の使用状況
	prinfo_ = (alldim_(0) != 0) + (alldim_(1) != 0) + (alldim_(2) != 0) + (alldim_(3) != 0)

	; 配列数合計
	sum_ = 1
	repeat 4
		if (alldim_(cnt) == 0)  :  break
		sum_ *= alldim_(cnt)
	loop

	; 書き出し
	repeat sum_
		i(4) = cnt
		repeat prinfo_
			num_ = i(4)
			repeat cnt
				num_ /= alldim_(cnt)
			loop
			i(cnt) = num_ \ alldim_(cnt)
		loop
		noteget hogeline, i(5)

		if      (type == 2) {hoge =    str(hogeline)}
		else:if (type == 3) {hoge = double(hogeline)}
		else:if (type == 4) {hoge =    int(hogeline)}

		gosub jump_(prinfo_, 4)      ; ラベルジャンプで分岐
		i(5)++
	loop
	return

//-------------------------------  配列書き出し  -------------------------------//

*not_varcnv@myarray
	return

; 1次元配列 jump_(1, 4)
*cnvarray_1@myarray
	ary(i(0)) = hoge
	return

; 2次元配列 jump_(2, 4)
*cnvarray_2@myarray
	ary(i(0), i(1)) = hoge
	return

; 3次元配列 jump_(3, 4)
*cnvarray_3@myarray
	ary(i(0), i(1), i(2)) = hoge
	return

; 4次元配列 jump_(4, 4)
*cnvarray_4@myarray
	ary(i(0), i(1), i(2), i(3)) = hoge
	return



//----------------------------------------------------------
// ラベル型配列変数生成
//----------------------------------------------------------

// ラベル型配列変数生成
//
// hyouj  : 書き出し先の複数行文字列型変数
// ary    : 書き出す文字列型配列変数
// in_val : 代入値またはそれを格納した変数
// index  : 増減値 (str, double, int)
#deffunc local labarray_ str vname, var hyouj, array ary, var in_val, var index, var coment
	dim i, 7

	ainfo_@myarray hyouj, ary, vname, 0, coment, -2
	; インデックス付与のために一旦退避
	strbuf_ = in_val  :  indexbuf_ = index

	; 配列数合計
	sum_ = 1
	repeat 4
		if (alldim_(cnt) == 0)  :  break
		sum_ *= alldim_(cnt)
	loop

	repeat sum_
		i(4) = cnt
		repeat prinfo_
			num_ = i(4)
			repeat cnt
				num_ /= alldim_(cnt)
			loop
			i(cnt) = num_ \ alldim_(cnt)
		loop
		gosub jump_(prinfo_, 5)    ; ラベルジャンプで分岐
		; 文字列に対してインデックスの付与
		in_val = strbuf_                ; 足される方を元データに上書き
		in_val += "" + indexbuf_        ; インデックスの追加
		indexbuf_ += index              ; インデックスカウントアップ
	loop

	hyouj += "\n"
	return

//---------------------------------  配列代入  ---------------------------------//

; 未対応の型はこちらへ jump_(0, 5)
*not_varlab@myarray
	return

; 1次元配列 jump_(1, 5)
*labarray_1@myarray
	ary(i(0)) = in_val
	hyouj += strf("\t%s" + srfor(0, 1), hogestr, i(0), in_val)
	return

; 2次元配列 jump_(2, 5)
*labarray_2@myarray
	ary(i(0), i(1)) = in_val
	hyouj += strf("\t%s" + srfor(1, 1), hogestr, i(0), i(1), in_val)
	return

; 3次元配列 jump_(3, 5)
*labarray_3@myarray
	ary(i(0), i(1), i(2)) = in_val
	hyouj += strf("\t%s" + srfor(2, 1), hogestr, i(0), i(1), i(2), in_val)
	return

; 4次元配列 jump_(4, 5)
*labarray_4@myarray
	ary(i(0), i(1), i(2), i(3)) = in_val
	hyouj += strf("\t%s" + srfor(3, 1), hogestr, i(0), i(1), i(2), i(3), in_val)
	return


//##############################################################################
//                               <<  マクロ  >>
//##############################################################################


//----------------------------------------------------------
// 多次元配列書き出しマクロ
//----------------------------------------------------------

// 多次元配列変数の書き出し
//
// %1 : 配列変数の中身を受け取る文字列型変数
// %2 : 配列変数
// %3 : コメント
#define global priarray(%1,%2,%3="")\
	midlevar_@myarray=%3:\
	priarray_dx@myarray "%2",__line__,%1,%2,midlevar_@myarray

// "%2"     : 変数名
// __line__ : 行数

	// "%2"     変数名を表示させるための幻の第4パラメータです
	//          マクロ展開時、ダブルクオーテーションに囲まれた状態で
	//          展開されるので文字列として内部命令に渡すことができています
	//          これは仕様なのでしょうか?
	// midlevar_@myarray
	//          パラメータタイプを var に統一するための中間変数
	//          ラベル型、文字列型、実数型、整数型、そして変数での指定
	//          これらを可能にするため変数で格納し、変数として内部命令に渡しています



//----------------------------------------------------------
// 多次元配列連続代入マクロ
//----------------------------------------------------------

// 多次元配列連続代入マクロ
//
// %1 : 代入先の配列変数
// %2 : 代入したい値
// %3 : indexフラグ(=0)(0 : OFF, 1 : ON)
// %4 : 増減値 (str, double, int)
#define global setarray(%1,%2,%3=0,%4=1)\
	midlevar_@myarray=%2:\
	increase_@myarray=%4:\
	setarray_@myarray "%1",__line__,%1,midlevar_@myarray,%3,increase_@myarray

// "%1"     : 変数名 (エラーレポート用)
// __line__ : 行数   (エラーレポート用)

	// increase_@myarray
	//
	// 増減値用の中間変数
	// midlevar_と同様、実数型、整数型（以下、数値型）、文字列型のそれぞれに対応するためのものです
	// 正の値で増加、負の値で減少、文字列型にもインデックスの付与が可能です
	//
	// ※ただし、数値型を基準としているので初期値（スタート）はp2となり、
	// 数値型の場合、例えば
	// 0, 1, 2, ... や、0.0, 0.1, 0.2, ...  となりますが、文字列型の場合、
	// abc, abc1, abc2, abc3,...   という感じで0スターにはなりません


// n次元配列の生値出力
//
// hyouj : 配列変数の中身を受け取る文字列型変数
// ary   : 配列変数
// iflg  : ラベル生成フラグ (= 0)
#define global outarray(%1,%2,%3=0) outarray_@myarray %1,%2,%3



// あらゆるものを多次元配列に変換する
//
// %1 : 変数名（dim系で初期化していなくてもOK）
// %2 : 読み込む複数行文字列若しくは多次元配列変数
// %3 : 変換先の型を表す数値  (= 2) (2:文字列型, 3:実数型, 4:整数型) vartype
// %4 : 第1次元要素数 (= 0)
// %5 : 第2次元要素数 (= 0)
// %6 : 第3次元要素数 (= 0)
// %7 : 第4次元要素数 (= 0)
#define global cnvarray(%1,%2,%3=2,%4=0,%5=0,%6=0,%7=0) cnvarray_@myarray %1,%2,%3,%4,%5,%6,%7

	// 複数行文字列、または多次元配列の両方から別の多次元配列へ変換
	// すべての次元に対応しています。
	// 文字列型、実数型、整数型にも対応しており、変換後の配列変数の型を
	// 上記の3つのうちから選んで変換することが可能
	//
	// 配列変数どうしの変換の場合、%4〜%7を省略することで配列の一括コピー、若しくは
	// 一括型変換を行うことが可能


// ラベル型多次元配列生成
//
// %1 : 書き出し先の複数行文字列型変数
// %2 : 書き出す文字列型配列変数
// %3 : 代入値またはそれを格納した変数
// %4 : 増減値 (= 1)
// %5 : コメント
#define global labarray(%1,%2,%3,%4=1,%5="")\
	midlevar_@myarray=%3:\
	increase_@myarray=%4:\
	labcoment@myarray=%5:\
	labarray_@myarray "%2",%1,%2,midlevar_@myarray,increase_@myarray,labcoment@myarray


#global // myarray

	; ダミー
#module "my_dummy" _
#modcfunc local my_dummy_func_
	return ""
#global
	_myarray_init_@myarray    ; モジュール内の管理用変数の初期化です
	_load_hsphed_@myarray     ; ラベル型変数のラベル名取得用

#endif //__myarray__